{"./":{"url":"./","title":"À propos de cette documentation","keywords":"","body":" Documentation du projet Poppy Bienvenue Bienvenue dans la documentation du Projet Poppy, une plate-forme de robotique open-source. Dans cette documentation, nous allons essayer de tout couvrir, en partant d'un bref aperçu de ce qui est possible avec les outils du projet, et en passant par tous les détails nécessaires pour construire un robot Poppy ou de reproduire une des activités pédagogiques. Introduction Dans le premier chapitre nous vous donnerons un aperçu simple mais exhaustif de ce que vous pouvez faire dans ce projet, ainsi vous pourrez rapidement vous concentrer sur les chapitres suivants qui couvrent les points qui vous intéressent. Tandis que certains chapitres avancés peuvent nécessiter des connaissances en mécanique, électronique ou informatique, la section Mise en route, est destinée à être facilement accessible par tous les lecteurs. À propos et contributions Cette documentation est maintenue par l’équipe Poppy avec l'aide de nombreux contributeurs bénévole. Si vous trouvez des erreurs ou que vous souhaitez mettre à jour le document veuillez suivre le guide de contribution. Ce document est sous licence CC-BY 4.0. Vous êtes libre de copier, modifier et redistribuer ce document tant que vous donnez un crédit approprié aux auteurs et un lien vers le site original docs.poppy-Project.org. Il est écrit en markdown, hébergé sur GitHub, et GitBook est utilisé pour générer le site Web. Version Ce document a été mis à jour le Tu August yy. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"getting-started/":{"url":"getting-started/","title":"Mise en route","keywords":"","body":"Premiers pas Le projet de Poppy est une plate-forme open-source pour la création, l'utilisation et le partage de robots interactifs imprimés en 3D. Il rassemble une communauté interdisciplinaire de débutants, d'experts, de chercheurs, d'enseignants, de développeurs et d'artistes. Ils partagent tous une même vision : les robots sont de puissants outils pour apprendre et développer la créativité, et ils collaborent pour améliorer le projet. Ils développent de nouveaux comportements pour les robots, créent des contenus pédagogiques, élaborent des performances artistiques, améliorent le logiciel ou même conçoivent de nouveaux robots. La communauté Poppy développe des créations robotiques qui sont faciles à construire, personnaliser et utiliser. Un ensemble de services web permet à la communauté de partager leurs expériences et de contribuer à l'amélioration de la plateforme Poppy. Pour faciliter ces échanges, deux supports sont disponibles : Le forum de projet Poppy pour avoir de l'aide, partager ses idées et en discuter. GitHub pour soumettre vos contributions et faire un suivi des bugs logiciels. Toutes les sources du projet Poppy (logiciel et matériel) sont disponibles sur GitHub. Le projet Poppy a été conçu initialement à Inria dans l'équipe Flowers. Les robots Poppy Les robots Poppy sont open source et libre. Leur sources sont disponible librement, il est possible de les modifier et de les redistribuer selon les termes prévus par leur licenses. Les pièces matérielles (carte électronique et modélisation 3D) sont sous license (Creative Commons Attribution-ShareAlike et le logiciel GPLv3. Ils ont été tous conçus selon les même principes. Les robots Poppy: sont fabriqués à partir de pièces imprimable en 3D et des servomoteurs Dynamixel, utilisent un ordinateur embarqué (Raspberry Pi ou Odroid pour les anciennes versions), fonctionnent avec une bibliothèque logicielle en Python, pypot, qui permet de contrôler les servomoteurs Dynamixel simplement, sont également contrôlable avec les même outils dans un simulateur (V-REP), peuvent être contrôlé à l’aide d’un langage de programmation visuel (Snap ! une variante de Scratch) et un langage textuel Python. Ils sont également programmables via une API REST, ce qui permet se s'interfacer avec d'autres languages de programmation viennent avec un documentation associée, des tutoriels, des exemples et des activités pédagogiques. Ils peuvent être utilisés comme tels quels ou hackés (au sens de bidouillé) pour explorer de nouvelles formes, ajouter des capteurs, etc... Pour obtenir votre propre robot Poppy, vous pouvez soit : vous procurer toutes les pièces en suivant la liste du matériel (voir ci-dessous). Acheter un des robots Poppy en kit complet chez notre revendeur officiel, Génération Robots. Poppy Ergo Jr Le robot Poppy Ergo Jr est un petit bras robot à faible coût avec dôté de 6 articulations. Il est fait de 6 moteurs peu cher (XL-320 servomoteurs Dynamixel servos) avec des pièces simples imprimés 3D. Les pièces 3D ont été conçues pour être facilement imprimable sur une imprimante 3D basique. Les moteurs coûtent seulement 20€ chacun. L'accès à sa carte électronique est simple. Elle facilite la connexion des capteurs supplémentaires et est bien adaptée à des fins pédagogiques. Vous pouvez choisir parmi trois outils à la fin de son bras : Un abat-jour. Une pince. Un porte stylo. Les rivets utilisés rendent le changement d'outil simple à faire. Vous pouvez l’adapter selon le type d’activités que vous faites. Poppy Ergo Jr est le robot idéal pour apprendre la robotique sans difficultés : assemblage simple, facile à contrôler et à un prix abordable. Vous pouvez vous procurez toutes les pièces en suivant la nomenclature (BOM) et imprimer les pièces 3D disponible au format STL. Pour plus d'informations, jetez un coup d'oeil au guide d'assemblage de l'Ergo Jr. Poppy Humanoid C’est un robot humanoïde composé de 25 articulations avec une colonne vertébrale entièrement actionnée. Il est utilisé pour l'éducation, la recherche (étude de la marche, l’interaction Homme-robot) ou encore pour des performances artistiques. D'un bras au robot complet, cette plateforme est activement utilisée dans les laboratoires, les écoles d'ingénieur, les fablabs et les projets artistiques. Vous pouvez vous procurez toutes les pièces en suivant la nomenclature (BOM) et imprimer les pièces 3D disponible au format STL. Poppy Torso C'est la partie supérieure du robot Poppy Humanoid (13 articulations). Poppy Torso est donc plus abordable qu'un Poppy Humanoid. Ce robot offre une solution plus adaptée aux besoins de l'éducation, des associations et des bricoleurs. Poppy Torso peut être un bon moyen pour apprendre les sciences, les technologies de l'information, l’ingénierie et les mathématiques (STIM). Vous pouvez vous procurez toutes les pièces en suivant la nomenclature. Les modèles 3D pour les pièces sont les mêmes que pour Poppy Humanoid, mais sans les jambes et avec un support ventouse en plus. Autres créatures Poppy intéressantes Un aspect clé du projet Poppy est de stimuler la créativité et l’expérimentation autour de la robotique. Nous essayons de fournir tous les outils nécessaires pour concevoir de nouveaux robots basées sur les mêmes briques technologiques. Quelques nouvelles créatures sont en développement au sein de la communauté. Certaines d'entre elles sont illustrées ci-dessous. Poppy bras droit (travail en cours) Poppy bras droit est une créature Poppy basé sur le bras droit du robot Poppy Humanoid, avec 3 moteurs XL-320 supplémentaires pour améliorer la portée et l'agitilité du bras. Il utilise le même outil de préhension utilisé par l’Ergo Jr, conçu pour attraper des objets simples. Le projet a été réalisé lors d’un stage au sein de l'équipe Flowers de l'Inria par Joel Ortiz Sosa. Pour plus d'informations et les sources jetez un coup d'oeil au répertoire. Des Humanoid plus petits et moins chers Heol Heol - « soleil » en Breton - est un robot humanoïde haut de 34cm fait par l’association Heol robotique. Composé de 23 moteurs, toutes les autres pièces sont imprimés en 3D. Il utilise également la bibliothèque pypot pour ses mouvements. Le but de Heol est de donner le sourire aux enfants malades. Il peut être un outil pédagogique en devenant une plateforme d'apprentissage pour la conception mécanique et de programmation. Sa participation à la RoboCup (coupe du monde de football pour robots) est également envisagée. Poppyrate C'est un robot basé sur le Poppy Humanoid. Il vise à développer une version plus abordable grâce à sa petite taille et l’utilisation de moteurs encore moins chers. La réduction de la taille rend également plus facile l'impression des pièces avec une imprimante 3D standard. L'objectif donné est de rendre le robot aussi mobile et customisable que possible tout en maintenant sa compatibilité avec la plateforme Poppy. Poppyrate sera vendu en kit (avec ou sans les pièces 3D). Il a été conçu par l'entreprise ZeCloud. Pour plus d’informations, consultez leur Twitter - Facebook ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"getting-started/build.html":{"url":"getting-started/build.html","title":"Construire un robot","keywords":"","body":"Assembler le robot Le temps d'assemblage, les compétences requises, les outils et la difficulté varient selon selon les robots Poppy que vous voulez utilisez. Alors que construire un Ergo Jr devrait vous prendre environ une heure et cela sans outil spécifique, assembler un Humanoid peut vous prendre plusieurs jours et un sacré nombre de vis ! Cette section permet de vous donner des astuces et quelques détails nécessaires avant de s'immerger dans l'assemblage du robot. Plus de ressources et une documentation d'assemblage pas à pas sont disponible pour chaque robot dans la section guide d'assemblage . Assembler un Ergo Jr Note Vous retrouverez la documentation complète de l'assemblage dans le chapitre assemblage pas-à-pas de l'Ergo Jr. L'Ergo Jr a été conçu pour être un petit robot, simple, peu onéreux et facile à utiliser. Les pièces 3D ont été conçues pour être facilement imprimable en 3D et les moteurs (6 servomoteurs Dynamixel XL-320) coûtent 20€ chacun. Grâce aux rivets OLLO, le robot est facile à assembler. Ces rivets peuvent être enlevés ajoutés rapidement avec l’outil OLLO. Construire ce robot ne devrait pas vous prendre plus d'une heure. Son effecteur peut être facilement changé. Vous pouvez choisir parmi plusieurs outils : un abat-jour, une pince, * ou un porte-stylo. A part la vérification de l'orientation des moteurs, il n'y a pas vraiment de piège. Si vous êtes familier avec les briques Lego, vous devriez pouvoir assembler Ergo Jr sans trop de problème ! Les rivets ont été pensé pour que l'assemble soit aussi facile que le désassemblage. Donc en cas de problème, vous n'avez qu'à recommencer ! Par ailleurs, faites attention à configurer vos moteurs avant d'assembler le robot, ce sera plus difficile de le faire après ! Assembler un Torso ou un Humanoid Note Vous pouvez trouver la documentation complète de l’assemblage dans le chapitre montage pas-à-pas du robot Humanoid. Construire un Poppy Torso ou un Humanoid est beaucoup plus complexe que le robot Ergo Jr, mais ce n'est pas vraiment plus compliqué que de construire un Meccano ou des meubles suédois. Cela consiste en ces quelques étapes : assembler le palonnier de chaque moteur : soyez attentif à ce que le moteur soit bien sur sa position initiale, son zéro ! configurer les moteurs afin qu'ils coïncident avec la configuration Poppy utiliser un grand nombre de vis pour connecter toutes les pièces 3D aux moteurs faire un peu d'électronique pour la carte embarquée au niveau de la tête : cela peut se révéler un peu difficile si vous n'êtes pas familier avec cette discipline. La patience et la précision sont vos meilleurs atouts, mais en cas d'erreurs, pas de panique : les robots Poppy sont faits pour être montés et démontés. Si vous faites attention des mises en garde suivantes, après quelques essais/erreurs vous aurez un Poppy Torso ou Humanoid en état de marche : Mise en garde 1 : Les robots Poppy Humanoid ou Torso fonctionnent principalement avec des servomoteurs Dynamixel MX-28 et MX-64. Ils sont plutôt puissants et peuvent être dangereux si l'on s'y coince les doigts. Donc soyez prudent et mettez le robot dans un environnement dégagé pendant que vous le testez ! Mise en garde 2 : Alignez le palonnier avec le repère sur l'axe du servomoteur. Mise en garde 3 : Ajustez les trois repères du palonnier avec les trois repères de la pièce 3D. Mise en garde 4 : Utilisez du frein filet pour éviter le déliement des vis dues aux vibrations. Cependant, poser l'extrémité de la vis sur le frein filet est amplement suffisant. Si vous mettez trop de frein filet vous risquez de coller définitivement vos vis et rendre très compliqué tout démontage ! Guide d'assemblage pas-à-pas : Guide pour Poppy Humanoid Guide pour Poppy Torso Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"getting-started/connect.html":{"url":"getting-started/connect.html","title":"Se connecter au robot","keywords":"","body":"Démarrez et connectez le robot Dans cette section, nous décrirons comment démarrer votre robot et donnerons un aperçu des possibilités d’y accéder. Configurer le logiciel Les robots Poppy sont équipés d'une carte embarquée (exemple : Raspberry Pi, ODROID...) dont le rôle consiste à contrôler les moteurs et à accéder aux capteurs. À des fin de simplicité, on peut accéder à cet ordinateur à distance via une interface web. Il est facile de contrôler le robot à partir de votre propre ordinateur ou tablette sans avoir à télécharger / installer quoi que ce soit. Il existe deux façons de configurer la carte pour votre robot Poppy: la manière simple : utilisez une image préprogrammée du système d'exploitation Poppy et écrivez-la (installez-la) sur la carte SD la manière difficile pour les utilisateurs avancés : installez tout à partir de zéro Note Si vous envisagez d'utiliser un robot simulé (robot virtuel), vous devez installer le logiciel sur votre ordinateur personnel. Suivez les instructions pour le paramétrage de la simulation. Manière simple et recommandée : utiliser la carte SD Poppy Le moyen le plus simple et le plus rapide - de loin - est d'utiliser une image système déjà créée pour une carte SD. Les images ISO contiennent tous les éléments pré-installés pour votre robot Poppy. C'est aussi un bon moyen de s'assurer que vous utilisez exactement le même logiciel que nous. Ainsi, vous éviterez la plupart des problèmes. Note Les kits robotiques Poppy sont livrés avec une carte SD prête à l'emploi. Donc, vous n'avez rien de spécial à faire. Pour chaque robot Poppy, l'image se trouve sur sa page web de sa dernière version : pour le robot Poppy Ergo Jr pour le robot Poppy Torso pour le robot Poppy Humanoid L'image peut être écrite sur une carte SD (d'au moins 8 Go) en utilisant un utilitaire tel qu'Etcher. Une fois que la carte SD est prête, insérez-la dans la carte embarquée (micro-ordinateur). Ensuite, lorsque vous branchez votre robot, il devrait démarrer automatiquement et vous devriez pouvoir vous connecter à son interface web. Info Vous trouverez plus de détails dans la section démarrage. Manière avancée : DIY, installez tout à partir de zéro La manière avancée consiste principalement à installer tout ce qui est nécessaire à partir de zéro. Cela suit la même procédure que nous utilisons pour générer l'image de cartes SD. Nous mentionnons cette possibilité ici car cela peut être utile si : Vous travaillez avec un robot simulé et devez donc installer manuellement tous les logiciels requis sur votre ordinateur, cette procédure vous montre comment cela peut être fait sur un Raspberry-Pi (carte embarquée) et l'adapter à un autre ordinateur, vous voulez personnaliser l'environnement, ou si vous voulez tout simplement comprendre comment ça fonctionne. Attention Nous essayons de garder cette procédure d'installation aussi générique que possible. Pourtant, certains détails peuvent varier selon votre système d'exploitation ou votre ordinateur. En outre, l'installation à partir de zéro exige une bonne connaissance de comment installer et configurer un environnement python. Selon ce que vous voulez faire, toutes les étapes ne sont pas nécessaires. En particulier, si vous souhaitez contrôler un robot simulé, vous pouvez simplement installer les bibliothèques python pour Poppy. Information Plus de détails peuvent être trouvés dans la section Installation pour utilisateurs avancés. Configuration du réseau Une fois que votre Poppy est assemblé et son logiciel est prêt, l'étape suivante consiste à le connecter à un réseau. L'objectif est de vous permettre d'accéder à distance au robot à partir de votre ordinateur ou votre smartphone / tablette, le contrôler et le programmer. Il y a deux façons principales de connecter votre robot à votre ordinateur / tablette / smartphone : Connectez à la fois le robot et l'ordinateur au même réseau (par exemple, la box internet de votre maison ou le réseau de l'école). Connectez directement votre robot à votre ordinateur à l'aide d'un câble Ethernet. Attention alors que la deuxième façon (brancher directement le robot sur votre ordinateur) fonctionne pour la plupart des utilisateurs. Il semble que dans certains cas étranges, cela ne fonctionne pas. Pour trouver l'adresse de votre robot sur le réseau, nous utilisons le protocole Zeroconf. Il vous permet d'utiliser le nom d'hôte du robot: \"poppy.local\" comme adresse. Cela devrait fonctionner sans aucune configuration sous Mac OS et GNU/Linux. Mais il faudra installer lesservices d'impression Bonjour pour Windows. Si vous préférez, vous pouvez utiliser l'adresse IP attribuée à votre robot à la place. Si vous n'êtes pas l'administrateur de votre réseau, cela peut être une information difficile à trouver. Dans ce cas, la première procédure devrait être privilégiée. Pour vérifier que tout est correctement configuré, vous pouvez accéder à l'url suivante en utilisant votre navigateur Web préféré: http://poppy.local/. Vous pouvez remplacer poppy.local par l'adresse IP de votre robot (quelque chose de similaire à http://192.168.0.42). Attention Si vous n'êtes pas familier avec la configuration du réseau ou si vous n'avez aucune idée de ce que le paragraphe précédent a mal essayer d'expliquer, vous devriez voir avec l'ingénieur du réseau informatique, comment cela peut être fait. Utiliser l'interface web L'interface web est le point central pour contrôler, programmer et configurer votre robot. Il peut être utilisé pour: Surveiller et contrôler le robot Programmer le robot en Snap! Programmer le robot en Python Configurer le robot (changer son nom, activer/désactiver la caméra, faire une mise à jour) * Réinitialiser et éteindre le robot Pour accéder à cette interface web, il vous suffit d'accéder à l'URL à l'aide de votre navigateur Web préféré : http://poppy.local (si vous avez changé le nom de votre robot, remplacez simplement poppy par son nouveau nom) ou en utilisant directement l'adresse IP du robot Vous devriez voir quelque chose comme : Les boutons permettent d'accéder aux différentes fonctionnalités. Par exemple, si vous cliquez sur Monitor and Control, vous accédez à l'application web du moniteur : Cela vous permet d’activer / désactiver les moteurs de votre robot, de les surveiller et de commencer / arrêter les comportements. Le bouton What happened c'est où vous devriez regarder pour plus d'informations si quelque chose qui ne va pas. Voici une capture d'écran de ce que vous devriez voir si tout va bien : Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"getting-started/program-the-robot.html":{"url":"getting-started/program-the-robot.html","title":"Programmer un robot","keywords":"","body":"Programmer le robot Les robots Poppy sont pensés pour être programmé facilement. Voici les trois principales façons d'y parvenir : avec la programmation visuelle Snap!, une variante de Scratch, avec Python et la possibilité de s'appuyer sur la puissance de l'API tout entière, * avec REST API, qui permet de connecter les robots Poppy à d'autres outils ou d'utiliser n'importe quel langage de programmation. Important : Tout comme le reste du projet, toute notre bibliothèque logiciel est open source (Licence GPLv3) et disponible sur GitHub. Avec Snap! Snap! est un langage de programmation visuel - une variante du déjà très connu language Scratch. C'est un langage de programmation basé sur l'utilisation de blocs facilement déplaçable, qui permet une bonne introduction à l'informatique. It runs in your browser as it is implemented in JavaScript. Vous n'avez pas besoin d'installer quoi que ce soit pour l'utiliser. Il est open source et mis à jour régulièrement. Nous avons créé plusieurs blocs propre à l'utilisation des robots Poppy qui permettent de contrôler chaque moteur et de lire les valeurs rapportées par les capteurs de votre robot. This let you to directly jump into controlling and programming your robot without any syntax/compilation issue. Snap! permet d'avoir une interactivité constante entre son interface et le robot. Vous n'avez qu'à cliquer sur un bloc et la commande associée se lance. La simplicité apparente de Snap! n'empêche pas de développer des projets de plus en plus complexes. Pour avoir un aperçu de ce qu'il est possible de faire avec Snap! et les robots Poppy, jetez un oeil au chapitre dédié. Avec Python Les librairies logicielles Poppy ont été écrites en Python, ce qui permet un développement et une extensibilité rapide, ainsi que de pouvoir utiliser n'importe quelle autre librairie scientifique. Python est d'ailleurs un langage très connu et largement utilisé dans les domaines de l'éducation et artistiques. En programmant Poppy en Python, vous aurez accès à tous les niveaux d'API, du plus bas au plus élevé. L'API a été pensé pour du prototypage très rapide. Créer un robot et faire bouger ses moteurs ne doit pas prendre plus de quelques lignes : from pypot.creatures import PoppyErgoJr jr = PoppyErgoJr() jr.m3.goal_position = 30 Nous aimons énormément le Jupyter Project et de ses notebooks. Les Notebooks sont des documents qui contiennent à la fois du code en Python et des éléments textuels tels que des équations, des photos, des vidéos. Ils peuvent être édités à partir de l'interface Jupyter Web, ce qui permet aux utilisateurs de programmer les robots Poppy directement à partir d'un site hébergé par l'ordinateur du robot. Nous pensons qu’il s’agit d’un outil puissant permettant la création et le partage de code en direct, la visualisation des résultats et des textes explicatifs, le tout combiné en un seul document. La plupart des tutoriels, expérimentations et activités pédagogiques que la communauté Poppy et nous proposons sont disponibles sous forme de notebooks. Info Vous pouvez retrouvez une mise à jour de la galerie de noteboks ici. Toute contibution est la bienvenue ! Avec l'API REST En plus de Snap! et de Python, nous voulions donner la possibilité de recourir à d'autres options pour accéder et contrôler votre robot depuis n'importe quel système ou langage de programmation. Les robots Poppy fournissent une API REST. Les fonctionnalités les plus importantes sont accessibles depuis les requêtes HTTP GET/POST. D'un point vue plus pratique, cela vous permet de : créez des passerelles pour controler le robot Poppy dans n'importe quel langage (des contributeurs géniaux ont déjà écrit des wrappers sur Matlab et Ruby). Créez des des applications web connectées à votre robot, telle qu'une interface moniteur (encore une contribution !). Faites intéragir votre robot avec d'autres objets connectés tels que les smartphones, les capteurs intelligent, ou encore votre compte Twitter... Attention L'API REST est encore une option en cours de développement, des changements y seront apportés, et la documentation n'est absolument pas terminée ! Pour plus d'informations, jetez un oeil ici ou alors sur notre forum. Une API REST bien conçue, stable et bien documentée est prévue pour la prochaine mise à jour majeure du logiciel. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"getting-started/visualize.html":{"url":"getting-started/visualize.html","title":"Visualiser","keywords":"","body":"Utiliser les robots dans un simulateur Robots Poppy simulés Une version simulée de chaque robot Poppy est disponible (Humanoid, Torso, Ergo Jr). On peut utiliser deux « simulateurs » avec les robots Poppy : V-REP : un simulateur de robotique avec de nombreuses possibilités et très utilisé un visualisateur web-3D : plus léger, mais sans simulation physique Attention Pour le moment seul l'Ergo Jr peut être utilisé dans le visualiseur web. Si vous souhaitez simuler d’autres créatures, vous devez utiliser V-REP. On souhaiterai prendre en charges les autres robots, mais aucun calendrier n'est fixé sur ce point là. L'utilisation d'un simulateur est très intéressante. Cela permet de développer et d'essayer des programmes sans avoir besoin d'un vrai robot. Plus particulièrement, cela permet : De découvrir et tester les possibilités du robot sans avoir à dépenser d'argent. De travailler dans un contexte où plusieurs utilisateurs partagent un robot. Par exemple, dans une salle de classe, chaque élève peut travailler en utilisant le simulateur et venir valider son programme sur le robot tangible. D'économiser du temps dans la conception et réalisation d'expériences. Nous essayons de faire en sorte que le passage du robot virtuel au tangible soit aussi transparente et simple que possible. La plupart des exemples de programmation et de la de documentation du code sont ainsi valable aussi bien pour les robots simulés que tangibles. Le chapitre de la simulation au robot tangible vous guidera dans les étapes pour adapter votre programme fonctionnant dans le simulateur vers l'usage d'un robot tangible. Attention Si vous souhaitez utiliser des robots Poppy dans un simulateur vous devrez installer le simulateur ainsi que librairies logicielles sur votre ordinateur. Installer les logiciels nécéssaire Pour information : Une section entière est dédiée à comment installer tout en local dans le but d'utiliser un simulateur si vous avez besoin de plus de renseignements. Alors que les robots physiques disposent d'un ordinateur embarqué pré-installé, vous devez installer certaines bibliothèques logicielles sur votre ordinateur pour contrôler les créatures Poppy simulées. Vous n'aurez pas accès à l'interface web du robot. Vous devrez lancer manuellement les différents services pour commencer à programmer votre robot (le terminal Jupyter pour les notebooks Pyhton ou le terminal Snap ! ). Pour commencer à contrôler un robot Poppy, que ce soit en utilisant V-REP ou le visualiseur web, vous aurez besoin : de Python > = 3.5 de la bilbiothèque Python nommée pypot de la bibliothèque Python correspondant à votre créature (p. ex. poppy-ergo-jr). Avec V-REP V-REP est un simulateur de robotique très populaire aux nombreuses fonctionnalités. Il est très utilisé dans pour la recherche ou des fins éducatives. De plus, il est disponible gratuitement avec la license éducative. Il peut être téléchargé depuis le site de Copellia Robotics (fonctionne sous Mac OS, Windows et GNU/Linux). Attention Etant donné que V-REP effectue une simulation physique ainsi qu'un rendu graphique du robot, il nécessite un ordinateur puissant (surtout pour la carte graphique). Tous les principaux robots Poppy sont disponibles dans V-REP : Poppy Humanoid Poppy Torso * Poppy Ergo Jr V-REP permet d’apprendre à commander les moteurs, interroger les capteurs, mais aussi d’interagir avec l’environnement simulé. On peut commander les robots simulés en Python, avec Snap ! ou par le biais de l’API REST. Voici quelques exemples de ce que la communauté a déjà pu faire avec : Une activité pédagogique pour découvrir les différents moteurs de votre robot et comment ils peuvent être contrôlés. Une expérience scientifique, où un Poppy Torso apprend comment pousser un cube sur une table en face de lui. Pour information Même si nous essayons de reproduire le comportement et le fonctionnement du robot, quelques différences persistent. Par exemple, si vous faites marcher un robot dans la simulation, cela ne veut pas dire que le robot physique marchera (et vice-versa). Pour démarrer le robot simulé, il faut dans un premier temps ouvrir V-REP et instancier le robot avec simulateur = « vrep ». V-REP va ouvrir une popup qui vous devrez fermer pour permettre la communication entre V-REP et Python. from pypot.creatures import PoppyErgoJr robot = PoppyErgoJr(simulator='vrep') Si vous souhaitez contrôler un robot simulé via Snap!, vous pouvez également le lancer directement depuis l' interface de ligne de commande poppy-services dans votre terminal (appelée invite de commande sous Windows) : poppy-services --vrep --snap poppy-ergo-jr En utilisant notre visualiseur web Notre visualiseur web permet d'afficher une représentation 3D d’un robot Poppy. Pour ce faire, vous aurez besoin de le connecter soit à un vrai robot (via l’API REST) soit à un robot simulé sur votre ordinateur. Vous devez simplement définir la variable host depuis l’interface web pour pointer sur l’adresse de votre robot. En Python, vous pouvez démarrer le robot simulé avec : from pypot.creatures import PoppyErgoJr robot = PoppyErgoJr(simulator='poppy-simu') Ajouter un argument use_snap = True si vous souhaitez démarrer l'API Snap. Si vous souhaitez contrôler un robot simulé avec Snap!, vous pouvez également le lancer directement avec l'outil interactif poppy-services dans un terminal (appelée ligne de commande sous Windows) : poppy-services --poppy-simu --snap poppy-ergo-jr En ce qui concerne V-REP, vous pouvez contrôler votre robot en utilisant Python, Snap!, ou l’API REST. Cependant il n’y a pas de support pour la simulation physique; c'est plus léger en terme d'exécution mais vous ne serez pas en mesure d’interagir avec des objets. Voici un exemple avec Python : Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"getting-started/example-of-projects.html":{"url":"getting-started/example-of-projects.html","title":"Exemples de projets","keywords":"","body":"Vue d’ensemble des projets développés par la communauté La communauté Poppy rassemble une communauté interdisciplinaire de débutants, d'experts, de chercheurs, d'enseignants, de développeurs et d'artistes. Des créations robotiques interdisciplinaires et diverses sont apparus. Certaines d'entre elles sont illustrées ci-dessous. School of Moon La pièce School of moon a été créer par la troupe Shonen sous la direction du chorégraphe Eric Minh Cuong Castaing. Elle présente un certain nombre d'artistes : des enfants, deux danseurs (Gaëtan Brun Picard et Ana Pi), trois robots Nao et deux robots Poppy Humanoid. Cette pièce est une métaphore de la création d’une post-humanité en trois actes : l’Homme, l’Homme et la machine et la machine. Les représentations sont locales, c'est à dire que les enfants participant aux différentes résidences de la troupe viennent des villes choisies. Certaines séquences de la pièce dépendent aussi des robots disponibles dans ces mêmes villes. Les défis artistiques sont : Mettre en scène des enfants Créer l'intéraction Homme - machine sur scène * Avoir des robots sur la scène La création s'est effectué sur 4 périodes : 2 semaine de résidence au CDC de Toulouse en septembre 2015 2 semaines de résidence au KLAP de Marseille en décembre 2015 4 semaines de résidence au Ballet National de Marseille en janvier 2016 2 semaines de résidence à Düsseldorf Projet Cherry Le projet Cherry est un projet communautaire qui a pour but d'élaborer des scénarios pour rompre l’isolement des enfants à l’hôpital. Ce projet utilise les robots Poppy comme compagnon pour les enfants d'école primaire hospitalisés. Cherry peut compenser une rupture social dûe à l'hospitalisation. Il sert d'intermédiaire entre l'enfant, ses amis et les enseignants. Il peut lui parler ou jouer à des jeux. Il agit également sur le plan pédagogique, afin d'encourager l'enfant à intéragir avec l'école, en proposant des quizzs et des jeux éducatifs. Cherry permet aussi d'assister le personnel de l'hôpital dans l'éducation thérapeutique. En effet, parfois un message est mieux assimilé par l’enfant si il est délivrée par le robot plutôt qu’un adulte habillé comme un médecin. Pour en savoir plus : La page Facebook Le compte Twitter Le blog WordPress The github (with a short wiki) Connecter Poppy et Arduino grâce à Snap4Arduino Gilles, Enseignant le jour et bricoleur la nuit, a développé de nombreux projets basés sur Poppy Ergo Jr et Arduino. Pour connecter ces deux univers, il utilise Snap4Arduino. Ainsi, il devient facile et élégant de les faire communiquer entre eux. Vous pouvez tout simplement adapter Arduino aux blocs Snap! du robot Poppy et tadam, vous pouvez contrôler votre robot avec n'importe quel capteurs de l'Arduino. Then the only limitation is your creativity! For instance, you can make Poppy Ergo Jr plays TicTacToe: Vous retrouverez la documentation détaillée dans la section Contrôler les robots Poppy avec une Arduino. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"installation/":{"url":"installation/","title":"Installation","keywords":"","body":"Installation En fonction de ce que vous voulez faire, toutes les sections ci-dessous supposent que vous avez le client Zeroconf / Bonjour d'installé sur votre ordinateur. Ce n'est pas obligatoire mais autrement, vous devrez connaitre l'adresse IP de votre robot. Le projet Poppy est vaste, il y a beaucoup de possibilités de chemins d'installation en fonction de ce que vous voulez faire. Vous voulez installer un robot Poppy physique Les robots Poppy sont contrôlées par un petit ordinateur embarqué : un Raspberry Pi ou une carte ODROID. Le système d'exploitation de ces ordinateurs est stocké sur une carte SD (vous pouvez également utiliser un contrôleur MMC pour la carte ODROID). Vous avez deux possibilités : - vous avez déjà une carte SD préchargée avec le système d'exploitation Poppy (fourni par Generation Robots). Vous n'avez rien à installer, vous êtes prêt à aller vers la section assemblage. C'est le cas le plus fréquent. - Vous avez une carte SD vierge, vous devez donc télécharger et graver le système d'exploitation sur la carte SD. Si vous êtes familier à Linux et que vous voulez essayer vous-même nos scripts d'installation (qui peuvent être instable), vous pouvez vous rendre au chapitre installation d'une carte Poppy . Vous voulez essayer des robots Poppy dans un simulateur ou dans le visualiseur web Installation des programmes Poppy sur votre ordinateur Installation du simulateur V-REP Vous voulez réaliser des travaux avancés avec un robot tangible Si vous voulez installer vous-même le système d'exploitation des robots Poppy avec nos scripts d'installation instables : -Installation d'une carte Poppy Si vous voulez contrôler un robot à partir de votre ordinateur personnel, vous devez: -installer des logiciels Poppy sur votre ordinateur -Installer les drivers USB vers série si vous êtes sous Windows Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"installation/install-zeroconf.html":{"url":"installation/install-zeroconf.html","title":"Installez Bonjour/Zeroconf","keywords":"","body":"Zeroconf / Bonjour Zeroconf also called Bonjour (name of Apple implementation) is set of technologies that allow more easily communication between computers without configuration. To be short: - It makes able to reach the robot on your local network without having to know its IP address - It makes able to connect the robot to your computer directly with an Ethernet wire without using a router, and without a DHCP server. Info Zeroconf is not mandatory on your computer to use Poppy robots, it is strongly recommended, and the documentation will assume it is installed. Otherwise replace all poppy.local occurrences by the IP address of the robot given by your router. Installation Windows Vous devez installer lesServices d'impression Bonjour pour Windows (Oui, c'est un logiciel Apple). Si vous avez déjà installé un logiciel de la marque Apple comme iTunes ou QuickTime, Bonjour doit déjà être installé. Attention Parfois, même si Bonjour est déjà installé sur votre ordinateur, vous ne pouvez pas vous connecter directement à votre Ergo Jr. Pour résoudre le problème, désinstallez et réinstallez Bonjour. Sur les systèmes GNU/Linux Sur GNU/Linux, vous devez installer avahi-daemon (mDNS) et avahi-autoipd (IPv4LL), il peut ou ne peut pas être installé par défaut en fonction de votre installation. Sous Ubuntu/Debian, exécutez sudo apt-get install avahi-daemon avahi-autoipd Sous Fedora / CentOS, exécutez sudo yum install avahi-daemon avahi-autoipd To connect to your robot directly with an Ethernet wire, you need to select local link only on the IPv4 configuration of your Network manager. Sous MAC OSX Bonjour is already installed with OSX. Moreover, if you plan to connect your computer directly to the robot (without a router), use a Thunderbolt to Ethernet adapter rather than a USB to Ethernet You ready to follow your installation path. Ce que Zeroconf fait pour vous Nom de domaine local (mDNS) Zeroconf client publishes a decentralized local domain name (mDNS) with the '.local' top level domain. It means that you can join any local local computer by its hostname with the '.local' suffix instead of its IP address. With a zeroconf client, to ping a computer called (hostname) 'ergojr', you can simply do: $ ping ergojr.local 64 bytes from 192.168.1.42: icmp_seq=0 ttl=54 time=3.14 ms [...] You no longer need to look for its IP address on your local network; you don't even need to understand what an IP address is. It also work on your web browser. To open the website hosted on the robot computer called 'ergojr', you have to open: http://ergojr.local on your favorite web browser URL field. Link-local IPv4 addresses (IPv4LL) Among other Zeroconf tools, there is an implementation of decentralized DHCP (IPv4LL), which allow computers obtain an IP and connect each others without a DHCP server. The auto-adressed IP is in the APIPA range, from 169.254.0.0 to 169.254.255.255. You can plug a robot to your computer directly on your computer with an Ethernet cable, without any router and connect it with its local domain name (hostname.local). Attention Vous serez en mesure d'utiliser l'adresse IPv4 de liaison locale seulement si vous avez installé vos robots après la fin du mois de mai 2016. Précédemment le paquet avahi-autoipd était manquant. Alternatives pour trouver l'adresse IP d'un ordinateur sur votre réseau local If you cannot (or doesn't want to) install a zeroconf client on your personal computer, you can use one of the following methods to find the IP address of your robot. Vous pouvez utiliser Fing, célèbre pour ses applications Android et iOS, Nmap or arp(only GNU/Linux and MAC OSX) if you are not afraid of command line interfaces. nmap -sn 192.168.1.0/24 arp -an | grep -i B8:27:EB Vous pouvez également accéder à l'interface Web de votre routeur (avec l'adresse IP sur votre navigateur Web comme http://192.168.0.1 ou http://192.168.1.1 ou http://192.168.0.254 ou encore http://192.168.1.254), vous devriez voir une section d'hôtes connectés. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"installation/burn-an-image-file.html":{"url":"installation/burn-an-image-file.html","title":"Télécharger et graver l'image système","keywords":"","body":"Démarrer avec un robot Poppy Note Ce chapitre est réservé aux personnes qui veulent contrôler un robot tangible. Si vous avez l’intention de contrôler un robot simulé par ordinateur, veuillez vous référer au parcours d’installation pour le simulateur. Les créatures Poppy sont contrôlées par un petit ordinateur embarqué : un Raspberry Pi ou un Odroid. Le système d’exploitation de cet ordinateur est stocké sur une carte SD (vous pouvez également utiliser une carte MMC pour le Odroid). Vous pouvez être dans deux types de cas : Vous avez déjà une carte SD avec le système d’exploitation Poppy (fournie par l’un des distributeurs de Poppy par exemple). You're ready to go to the assembly section. Vous avez une carte SD vierge, il faut donc télécharger et écrire le système d’exploitation sur la carte SD. Info Le système d’exploitation de créatures Poppy utilise une distribution GNU/Linux, mais vous n’aurez pas besoin de connaissances avancées sur Linux pour installer l’image sur le Raspberry Pi. Vous devez seulement avoir un ordinateur avec un lecteur de cartes SD pour écrire l’image sur la carte SD. Télécharger l’image du système d’exploitation Il faut choisir l’image (fichier en *. img.zip) à télécharger selon la créature Poppy et la carte contrôleur souhaitée : Ergo Jr Poppy Torso Poppy Humanoid Graver l’image de système d’exploitation sur la carte SD Muni du fichier image correspondant à votre créature Poppy, vous devez utiliser un outil d’écriture pour l'installer sur votre carte SD. Graver l’image avec Etcher (logiciel avec une interface graphique) Téléchargez et installez Etcher. Ce logiciel fonctionne sur les systèmes d’exploitation Windows (versions Windows 7 ou ultérieure), MAC OSX et GNU/Linux. - Insérez la carte SD dans votre ordinateur. -Démarrez Etcher, sélectionnez le lecteur de carte SD, sélectionnez l’image (un fichier nommé par exemple 2017-04-13-poppy-ergo-jr.img.zip). Démarrez l'écriture. L’image écrite sur votre carte sera vérifiée automatiquement à la fin de l'opération. Now you are ready to assemble your robot! Graver l’image avec dd (logiciel en ligne de commande) Danger Cette méthode fonctionne uniquement pour GNU/Linux et les systèmes d’exploitation OSX et n’est pas recommandée si vous ne comprenez pas ce que vous faites. Insérez la carte SD et chercher où votre carte SD est montée (/dev/mmcblk0 et/dev/disk2 dans l’exemple qui suit). Adaptez à votre cas et exécutez une de ces commandes. Soyez prudent, vous pourriez effacer l’une de vos partitions disques si vous ne comprenez pas ce que vous faites. Si vous êtes sur un système d’exploitation GNU/Linux : sudo dd bs=4M if=poppy-ergojr.img of=/dev/mmcblk0 Si vous utilisez OSX ou un autre système d'exploitation basé sur BSD : sudo dd bs=4m if=poppy-ergojr.img of=/dev/rdisk2 Info La commande dd ne donne aucune information sur sa progression et donc peut donner l'impression d’être gelée ; cela peut prendre plus de cinq minutes pour terminer l'écriture de la carte. Pour voir l’état d’avancement de l’opération d'écriture, vous pouvez exécuter sudo pkill -USR1 - n - x JJ dans un autre terminal. Exécuter la commande sync ; cela garantira que le cache d’écriture est vidé et qu’il est possible de démonter votre carte SD sans causer de corruption des données. Retirez la carte SD du lecteur de carte. Vous êtes maintenant prêt à assembler votre robot ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"installation/install-poppy-softwares.html":{"url":"installation/install-poppy-softwares.html","title":"Installer les logiciels Poppy","keywords":"","body":"Installer le logiciel Poppy Mise en garde Si vous souhaitez installer le logiciel d’un robot réel sur une carte embarquée de type Raspberry Pi, allez plutôt au chapitre de démarrage. Cette section vous guidera pour installer le logiciel Poppy sur votre ordinateur personnel. Elle est utile seulement si vous êtes dans l’une de ces situations : vous souhaitez contrôler un robot simulé. Vous souhaitez contrôler une créature Poppy depuis votre ordinateur sans utiliser la carte embarquée fournie (Odroid ou Raspberry Pi). Les créatures Poppy sont contrôlées par du code écrit en langage Python. Selon votre système d’exploitation, vous devrez installer Python et dans tous les cas, vous devrez installer les bibliothèques logicielles requises. 1. Installer Python ... ... sur Windows Téléchargez et installez la dernière version de Python pour Windows (x86-64 executable installer). Prenez soin de cocher la case Add Python to PATH durant l'installation, sinon WIndows ne trouvera pas Python dans les étapes suivantes. Info Poppy fonctionne avec 3.5.x et versions supérieures. Anaconda et Python 2.x.x ne sont plus supportées depuis pypot >= 4.0.0. ... sur Mac OSX Mac OSX est livré avec une distribution Python installée par défaut. Avant d’installer le logiciel Poppy, vous devez installer le gestionnaire de paquets Python pip. Ouvrez un terminal, puis appuyez sur entrée pour exécuter la commande suivante : curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo python ... sur GNU/Linux (Ubuntu, Fedora, Archlinux ...) La plupart des distributions GNU/Linux sont déjà équipées de Python, alors il n'y a rien à installer pour Python, continuez à l'étape suivante. Rempalcez juste la commande pip par pip3 qui forcera l'utilisation de Python 3, car certaines distributions possèdent encore Python 2 en plus de Python 3. 2. Installer les logiciels Poppy Maintenant que Python est installé sur votre système, ouvrez un terminal, puis appuyez sur entrée pour exécuter la commande suivante : pip install poppy-ergo-jr Cela demande à Python d'installer la bilbiothèque relative à Poppy Ergo Jr. Note Remplacez « poppy-ergo-jr » par « poppy-torso » ou « poppy-humanoid » pour installer respectivement un Poppy Torso ou un Poppy Humanoid Mettre à jour le logiciel Poppy sous GNU/Linux N'effectuez pas cette étape si c'est votre première installation. Si vous avez besoin de mettre à jour vos logiciels Poppy, il est conseillé de mettre à jour \"pypot\" (la bibliothèque pour le contrôle des moteurs) et le paquet \"creature\" séparément : Note Remplacez « poppy-ergo-jr » par « poppy-torso » ou « poppy-humanoid » pour installer respectivement un torse Poppy ou un humanoïde Poppy. pip install pypot --upgrade --no-deps pip install poppy-creature --upgrade --no-deps pip install poppy-ergo-jr --upgrade --no-deps Info Pour comprendre les commandes ci-dessus: évitez d’utiliser sudo si vous utilisez l'environnement Python de votre système d'exploitation, cela pourrait créer des conflits compliqués à résoudre l'option --upgrade désinstallera l'existant avant de commencer l’installation l'option --no-deps évitera d’installer les dépendances, c’est utile pour éviter à pip de compiler scipy car cela échouera si vous n'avez pas installé les dépendances GCC et Fortran C'est fini ! Si vous avez réalisé les étapes 1 et 2 et qu'il n'y a pas eu d'erreur spécifique, Poppy est installé sur votre ordinateur ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"installation/install-vrep.html":{"url":"installation/install-vrep.html","title":"Installation du simulateur V-REP","keywords":"","body":"Installation de l'environnement de simulation robotique V-REP (CoppeliaSim) Info Vous devez installer les logiciels Poppy avant d'installer l'outil de simulation robotique V-REP. V-REP est un simulateur robotique efficace principalement Open source (GNU GPL), qui est distribué sous une licence gratuite pour les établissements scolaires et propose une licence commerciale pour les autres secteurs. Il existe également une version PRO EVAL qui empêche seulement de sauvegarder. Vous n'avez pas besoin de sauvegarder la scène V-REP pour l'utiliser avec pypot (la bibliothèque Python conçue pour les créatures Poppy), nous vous suggérons donc d'installer cette version sans vous inquiéter d'éventuelles violations de droit d'auteur. Si vous souhaitez modifier la scène V-REP pour ajouter ou personnaliser une créature Poppy, vous devrez utiliser la version PRO ou la version EDU (la licence éducative). Installation de V-REP sous Windows Télécharger V-REP PRO EVAL ou EDU (si vous êtes un établissement scolaire). V-REP n'étant pas signé, vous devrez valider la fenêtre popup SmartScreen (sur Windows 10) pour commencer l'installation. Pendant l'installation, veillez à installer Visual C++ Redistributable 2010 et Visual C++ Redistributable 2012 . Si les versions de Visual C++ Redistributable 2010 ou Visual C++ Redistributable 2012 sont déjà présent sur votre ordinateur, il est conseillé de les \"réparer\" (il s'agit du processus de ré-installation). Après l'installation, vous pouvez réaliser un test pour vérifier si V-REP fonctionne bien . Installation sous MAC OSX Attention Ce paragraphe doit être complété. Votre aide est la bienvenue ! Installation sous GNU/Linux Attention Ce paragraphe doit être complété. Votre aide est la bienvenue ! Testez votre installation Ouvrez V-REP avec un double clic sur l'icône du bureau. Ouvrez l'invite de commande de votre distribution Python (appelé l'Invite de commande de Windows), tapez et validez en appuyant sur entrée pour exécuter la commande ci-dessous : poppy-services --snap --vrep --no-browser poppy-torso` Après une ou deux secondes, vous devez avoir une erreur dans votre invite de commande comme le montre l'image ci-dessous. Si vous passez à la fenêtre V-REP, un popup apparaît pour vous informer que la simulation utilise des paramètres personnalisés. Cette popup bloque la communication vers l'API Python de V-Rep. Vous devez vérifier que la case \"Do not show this message again\" est bien coché et appuyez sur \"Ok\". Revenez vers l'invite de commande Windows. Vous devez répéter la dernière commande (poppy-services --snap --vrep --no-browser poppy-torso) et cliquez de nouveau sur la fenêtre popup V-REP (avec la case cochée). Ce processus devra être répété trois fois pour que cela fonctionne bien ! Info Pour vous éviter de retaper la même commande encore et encore, vous pouvez appuyer sur la flèche du haut du clavier pour appeler la dernière ligne entrée. Lorsque la configuration de V-REP est finie, vous pouvez exécuter la dernière commande sans la dernière partie : \"--no-browser\". poppy-services --snap --vrep poppy-torso Si vous voyez une fenêtre popup de votre pare-feu, comme l'image ci-dessous, assurez-vous de vérifier que \"réseau privé\" est coché. Si tout fonctionne bien, un nouvel onglet a été ouvert sur votre navigateur Web par défaut. Vous pouvez débuter la programmation de votre robot dans Snap! ou en Python. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"installation/install-drivers.html":{"url":"installation/install-drivers.html","title":"Installer les pilotes USB vers port série","keywords":"","body":"Installer les pilotes Mise en garde Ce chapitre est destiné aux personnes qui veulent contrôler un robot Poppy sans employer une carte embarquée (Raspberry Pi ou Odroid). C’est un cas particulier pour les utilisateurs avancés. Si vous souhaitez contrôler des robots tangibles directement depuis votre ordinateur sans un Raspberry Pi ou un Odroid et que vous utilisez un ordinateur avec Windows (vs GNU/Linux ou MAC OSX), vous devrez peut-être installer manuellement les pilotes pour le USB2AX ou le USB2Dynamixel. Si vous utilisez un USB2AX Si le USB2AX n’est pas reconnu immédiatement (sa LED reste rouge après avoir été branché) sur votre ordinateur, vous devrez probablement installer manuellement ses pilotes. Le processus d’installation et les fichiers à télécharger se trouvent sur la documentation de USB2AX. Vous n'avez pas besoin de pilotes pour GNU/Linux ou MAC OSX, mais notez qu’il ne fonctionne pas très bien avec MAC OSX. Si vous souhaitez commander des moteurs XL-320 (protocole servomoteurs Dynamixel v2) à partir d’une USB2AX, vous devrez peut-être mettre à jour le firmware à la version 04 de la USB2AX. Si vous utilisez un USB2Dynamixel Vous devez installer les pilotes FTDI sur votre ordinateur. Vous devez baisser la « valeur de latence du Timer » de 16ms à 1ms (valeur minimum autorisée) comme expliqué dans la documentation de FTDI pour éviter que les appels pypot fassent un timeout. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"installation/install-a-poppy-board.html":{"url":"installation/install-a-poppy-board.html","title":"Installer un ordinateur embarqué pour un robot Poppy","keywords":"","body":"Installer un ordinateur embarqué pour un robot Poppy Mise en garde : ce chapitre est destiné seulement aux personnes qui veulent créer de toutes pièces une image système pour Raspberry Pi ou Odroid. Il est fortement conseillé de simplement graver une image système fournie par l'équipe Poppy pour installer les logiciels sur votre robot. Pour installer une carte embarquée pour Poppy, nous partons d’une distribution Linux standard (Debian ou Ubuntu), nous supprimons les logiciels inutiles et lançons quelques scripts. Ayez en tête pas que nos scripts d’installation n'ont pas été conçu pour les utilisateurs finaux : ils ne sont pas forcément à jour et il n’y a presque aucun messages d’erreurs pour vous guider. Si vous rencontrez des problèmes avec ces scripts, vous pouvez poster un message dans la section d’aide du forum Poppy. Pour un Poppy Ergo Jr / Raspberry Pi Les cartes SD Raspberry Pi du commerce sont pré-installées avec le système d'exploitation NOOBS, vous devez tout d’abord installer un système d'exploitation Raspbian. Téléchargez l’image de votre système : * Raspbian Jessie Écrivez l’image sur la carte SD avec un outil d'écriture de disque comme cela est expliqué dans la section démarrage. Ajoutez un nom de fichier vide « .ssh » dans la partition \"boot\" pour activer le SSH. Se connecter sur l'ordinateur embarqué par SSH : ssh pi@raspberrypi.local, mot de passe = raspberry. Note Remarque : Si vous utilisez Windows, vous n’avez pas de client SSH préinstallé. Vous devez télécharger et installer putty ou mobaxterm afin d’utiliser SSH. Vous devrez vous assurer que vous avez assez d’espace libre sur votre Raspberry Pi. Le moyen le plus simple est d’utiliser le script raspi-config pour étendre votre partition et occuper tout l'espace disque disponible sur la carte SD. Connectez-vous sur votre Raspberry et exécutez (vous devrez redémarrer ensuite) : sudo raspi-config Assurez-vous que votre carte est connectée à Internet et utilisez le programme d’installation « raspoppy » : curl -L https://raw.githubusercontent.com/poppy-project/raspoppy/master/raspoppyfication.sh | bash -s \"poppy-ergo-jr\" Note Changezpoppy-ergo-jr dans la commande ci-dessus par la créature Poppy que vous désirez installer sur votre Raspberry Pi. Redémarrez le Raspberry Pi après la fin de l’installation. Le nom d’hôte, utilisateur par défaut et le mot de passe sera « poppy » (ssh poppy@poppy.local mot de passe = poppy). Vous pouvez tester votre installation avec l’interface web dans votre navigateur web en allant sur http://poppy.local. Installer un Poppy Torso / Humanoïde sur un Odroid U3 ou Odroid XU4 Ces ordinateurs embarqués sont équipés de base sur la mémoire MMC d'une image système Ubuntu fonctionnelle, vous pouvez utiliser les scripts d'installation sur celle-ci. Dans le cas où vous n'avez pas de nouvelle installation, vous devez télécharger et graver des images système par défaut suivante: Ubuntu 14,04 pour Odroid U3 Ubuntu 14,04 pour Odroid XU3/XU4 Pour le graver le système d'exploitation sur la carte MMC/SD, regardez la section de démarrage. Maintenant que vous avez une installation fraichement installée, vous pouvez insérer votre carte mémoire dans votre ordinateur embarqué, brancher votre connexion Ethernet, et le mettre sous tension. Connectez-vous à la carte en SSH: ssh odroid@odroid.local, Mot de passe = odroid. Info Si vous utilisez Windows, vous n'avez pas de client SSH natif; vous devez télécharger et installer putty ou mobaxterm pour utiliser le protocole SSH. Assurez-vous que votre carte est connectée à Internet, télécharger et exécuter poppy_setup.sh (remplacer 'poppy-humanoïde' ci-dessous par 'poppy-torso' si vous voulez installer un robot Poppy Torso): wget https://raw.githubusercontent.com/poppy-project/odroid-poppysetup/master/poppy_setup.sh -O poppy_setup.sh sudo bash poppy_setup.sh poppy-humanoid Vous devriez perdre votre connexion SSH en raison du redémarrage de la carte. Ce redémarrage est nécessaire pour procéder à la finalisation du redimensionnement de la partition. Maintenant, votre carte embarqué devrait installer l'environnement Poppy. S'il vous plaît, n’éteignez ni ne coupez pas l'alimentation de la carte. Vous pouvez voir le processus d'installation en vous rebranchant à votre carte avec votre nouveau compte poppy: ssh poppy@poppy.local Mot de passe = poppy. En raison de la compilation de lourds paquets Python (Scipy, Numpy), le processus peut prendre plus d'une heure avant de ce terminer. Un processus va automatiquement prendre le contrôle de votre terminal et afficher les informations d'installation. Vous pouvez sortir avec Ctrl + c. Vous pouvez récupérer les informations en lisant le fichier install_log: tail -f install_log Soyez patient ... À la fin de l'installation, votre ordinateur redémarrera. Vous pouvez consulter le log tail-f install_log, si tout s'est bien terminé, les dernières lignes devraient être: System install complete! Please share your experiences with the community : https://forum.poppy-project.org/ Note: Si vous n'êtes pas sûr de ce qui se passe, vous pouvez voir si le processus d'installation est en cours d'exécution avec: ps up $(pgrep -f 'poppy_launcher.sh') Le nom d’hôte, utilisateur par défaut et le mot de passe sera « poppy » (ssh poppy@poppy.local mot de passe = poppy). Vous pouvez tester votre installation avec l’interface web dans votre navigateur web en allant sur http://poppy.local. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"assembly-guides/ergo-jr/":{"url":"assembly-guides/ergo-jr/","title":"Assembler l’Ergo Jr","keywords":"","body":"Guide d’assemblage pour l'Ergo Jr Poppy Ergo Jr est un robot éducatif peu onéreux qui se présente sous la forme d'un petit bras robotique à 6 degrés de liberté. Il se compose de formes très simples qui peuvent être facilement imprimés en 3D. Elles sont assemblées par des rivets qui peuvent être mis ou enlevés très rapidement avec l’outil OLLO. Son embout peut être facilement changé. Vous pouvez choisir parmi plusieurs outils : un abat-jour, une pince, * ou un porte-stylo. Grâce aux rivets ils peuvent être rapidement et facilement échangés. Cela permet d’adapter l'outil en fonction en fonction de vos utilisation du robot. Les moteurs Xl-320 ont les mêmes fonctionnalités que ceux utilisé sur les autres robots Poppy, mais sont légèrement moins puissants et moins précis. L’avantage étant qu’ils sont aussi nettement moins chers. La carte électronique est visible à côté du robot, ce qui est intéressant pour comprendre, manipuler et brancher des capteurs supplémentaires. Aucune soudure n’est nécessaire, il vous suffit d’ajouter la carte d'extension pixl sur les broches de la Raspberry Pi pour y connecter les moteurs XL-320. Ce chapitre vous guidera à travers toutes les étapes nécessaires pour assembler entièrement un Poppy Ergo Jr. Il couvrira : la configuration des moteurs l'assemblage électronique l'assemblage des pièces mécaniques L'assemblage complet ne devrait prendre qu'une heure ou deux la première fois que vous en construisez un. Avec plus de pratique, une demi-heure suffit grandement. À la fin du tutoriel, vous devriez avoir un Poppy Ergo Jr fonctionnel, prêt à être contrôlé ! Nous vous recommandons de suivre attentivement les instructions. Même si l'Ergo Jr est facilement démontable, il est toujours décevant d’avoir besoin de recommencer une partie de l'assemblage parce qu'on a oublié configurer les moteurs, ou qu'un moteur est inversé. Liste du matériel Vous trouverez ici la liste complète du matériel nécessaires pour construire un Poppy Ergo Jr. Matériel de l'Ergo Jr 1 x carte d'extension Pixl (carte électronique de contrôle des moteurs XL320 depuis une Raspberry Pi) 1 x disk_support.stl (coupé à la découpe laser) le plan 2D peut être trouvé ici. Vous pouvez également fabriquer la base avec une imprimante 3D, mais cela prendra beaucoup de temps les pièces imprimées en 3D au format STL ici 1 x base.stl 3 x horn2horn.stl 3 x side2side.stl 1 x long_U.stl 1 x short_U.stl 1 x support_camera.stl les différents outils 1 x lamp.stl 1 x gripper-fixation.stl 1 x gripper-fixed_part.stl 1 x gripper-rotative_part.stl 1 x pen-holder.stl 1 x pen-screw.stl Pièces faites par Robotis 6 x servomoteurs dynamixel XL-320 1 x jeu de rivets OLLO (vous aurez besoin d'environ 70 rivets colorés et de 4 rivets gris) 1 x outil OLLO Visserie 4 x M2.5x6mm vis (pour fixer la Raspberry Pi sur le socle) 4 x M2x5mm vis (pour fixer la caméra) 4 écrous x M2 (fixation caméra) 1 x entretoise M2.5 mâle/femelle 10mm Divers Electronique 1x Raspberry Pi 2 ou 3 1x micro SD 8Go (ou plus) 1x caméra Raspberry Pi 1 x alimentation 7.5V 2A avec un connecteur 2.1 x 5.5 x 9,5 (celle-ci par exemple). Câble Ethernet court Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"assembly-guides/ergo-jr/electronic-assembly.html":{"url":"assembly-guides/ergo-jr/electronic-assembly.html","title":"Assemblage électronique","keywords":"","body":"Assemblage électronique Insérez la carte microSD dans la Raspberry Pi Assurez-vous que vous utilisez une carte micro SD pré-configurée . Si ce n'est pas le cas, vous devez \"graver\" votre carte micro-SD avec l’image ISO d’Ergo Jr, ce qui est expliqué dans la section démarrage. Insérez la carte micro-SD à l’intérieur de la Raspberry Pi : poussez la carte micro-SD dans la fente du connecteur jusqu'à entendre un « clic ». Assemblez la carte d'extension pixl Info La carte Pixl peut être achetée sur le site de Génération Robot. La carte pixl vous permet d'alimenter la Raspberry Pi à partir d'une alimentation 7.5V DC ou avec des batteries, et vous permet de communiquer avec les moteurs XL-320. Branchez la pixl à l’extrémité des headers du Raspberry Pi. Une fois que la pixl est branchée (et pas avant), vous pouvez brancher l'alimentation et les fils des moteurs. Attention Vous devez absolument éteindre l'alimentation de la carte d'extension pixl avant de la connecter ou de la déconnecter de la Raspberry pi. Sinon, vous risquez de griller le convertisseur de tension de la carte Pixl. Vous pouvez à présent configurer vos moteurs. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"assembly-guides/ergo-jr/motor-configuration.html":{"url":"assembly-guides/ergo-jr/motor-configuration.html","title":"Configuration des moteurs","keywords":"","body":"Configuration des moteurs L'Ergo Jr est composé de 6 moteurs XL-320 fabriqués par Robotis. Chacun de ces servomoteurs possèdent une carte électronique lui permettant de recevoir différents types de commandes (sur sa position, sa vitesse, son couple ...) et de communiquer avec d’autres servos. Vous pouvez chainer ces servomoteurs entre eux et tous les commander depuis un bout de la chaîne. Cependant, afin d’être connecté et identifié sur le même bus (de donnée), ils doivent avoir un identifiant unique. En sortie d'usine, ils ont tous le même identifiant, c'est à dire le numéro 1. Dans cette section, nous vous donnerons plus de détails sur comment vous pouvez définir un nouvel identifiant unique à chacun de vos moteurs. Nous vous recommandons de configurer des moteurs en parallèle de l’assemblage des pièces du robot. Ce qui signifie qu’avant d’assembler un moteur neuf, vous commencez par le configurer puis le monter sur le reste du robot. Pendant la procédure d'assemblage, nous indiquerons chaque fois qu'il faut configurer un nouveau moteur. Allumez le robot Si vous utilisez Windows ou Linux (ce n'est pas nécessaire sous MacOS), vous aurez d'abord besoin d'installer le service d'impression Bonjour pour Windows (Zeroconf) (téléchargement Windows ici) ou bien avahi pour pouvoir vous connecter au robot. Pour plus de détails consultez la page d'information sur le protocole Bonjour/Zeroconf. Pour allumer votre robot avec ou sans moteur connecté : Branchez le câble Ethernet (RJ45) fourni du robot préférablement sur votre box Internet ou routeur. Note : Il est aussi possible de connecter ce câble directement à votre ordinateur mais un paramétrage supplémentaire est parfois nécessaire selon votre système d'exploitation pour obtenir une adresse IPv4LL avec Zeroconf donc la première option est préférable Branchez l'adptateur secteur sur la carte Pixl Note : Ne branchez JAMAIS une autre alimentation à votre Raspberry Pi (comme un câble micro-USB) si l'adaptateur secteur est branché. Votre robot démarre ... vérifiez que la LED verte ACT vacille durant environ 30 secondes le temps du démarrage, puis sur votre ordinateur vous pouvez ouvrir un navigateur (Firefox, Chrome, Edge, ...) à l'adresse http://poppy.local. Si cette adresse aboutit à une erreur similaire à l'image ci-dessous, vérifiez que vous tapez le préfixe http://, et que Bonjour est bien installé sous Windows. Votre configuration réseau pourrait être défectueuse : testez avec un autre routeur ou en connexion directe. Page doesn't exist Configurez votre robot Au premier démarrage, votre robot vous guide pour sa configuration, suivez simplement les étapes. Une étape importante est la configuration des moteurs. Lors de cette étape, un moteur doit être connecté seul à la carte Pixl afin de le configurer avec son nom de moteur m1, m2, m3, m4, m5 ou m6 comme montré sur le schéma ci-dessous. Chaque moteur doit être branché seul et configuré tour-à-tour en sélectionnant son nom et en cliquant sur le bouton Configurer. Les moteurs sortis d'usine sont identiques, à vous de vous souvenir quel nom vous avez attribué à chaque moteur pour l'assembler ensuite au bon endroit. Durant la configuration des moteurs, vous ne devez avoir branché que ces éléments : la Raspberry Pi la carte Pixl avec son adaptateur secteur 1 seul câble de moteur (câble noir à 3 fils) partant de la carte Pixl jusqu'à l'unique moteur à configurer le câble Ethernet reliant votre Raspberry Pi au réseau . A la fin de la configuration de chacun des moteurs, vous pouvez les rebrancher normalement avec les câbles de moteurs, chaînés les uns aux autres. Puis, cliquez sur le bouton proposé par l'interface pour tester de faire danser votre robot. Si la danse ne fonctionne pas, reprenez pas-à-pas la configuration individuelle de chacun des moteurs ; aidez-vous également des éventuels messages d'erreurs qui indiquent ce qu'il se passe. A l'issue de votre première connexion, vous tombez sur la page d'accueil définitive de votre robot. Amusez-vous bien ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"assembly-guides/ergo-jr/mechanical-construction.html":{"url":"assembly-guides/ergo-jr/mechanical-construction.html","title":"Assemblage des pièces mécaniques","keywords":"","body":"Assemblage mécanique Avis et avertissements d'ordre général Toutes les orientations des pièces sont très importantes. Regarez les photos très précisément pour reproduire le même assemblage avec les pièces dans le même sens. Si vous vous trompez, vous vous en rendrez compte car votre robot réalisera des mouvements différents que ceux que vous lui demanderez. Le cas échéant n'ayez pas d'inquiétude, vous pourrez toujours le démonter puis le remonter. Vous pouvez pré-assembler tous les rivets dont vous avez besoin avant la construction du robot. Chaque rivet consiste en l'assemblage de deux éléments l'un dans l'autre comme ceci : Il y a 2 sortes de rivetsThere are two kinds of rivets. The grey ones and the others. Grey rivets are longer to be able to be inserted in the motor axis, at the opposite side of the horn (black revolving circle). Utilisez l'outil OLLO pour pouvoir monter et démonter les rivets facilement. N'oubliez pas de passer les fils pendant l'assemblage de votre robot. Chaque moteur, excepté le dernier doit avoir ses 2 connecteurs occupés: l'un connecté au moteur précédent, l'autre connecté au moteur suivant. Il n'y a cependant pas d'importance quant-à quel connecteur est connecté au moteur suivant ou précédent. Alignez toujours le palonnier (la roue d'entrainement noire) avec le moteur avant de les assembler ! Sinon votre Poppy Ergo Jr aura l'air tout à fait bizarre. Tous les palonniers des moteurs (la roue d'entrainement noire) doivent être alignés sur le côté gauche du robot. C'est juste une convention mais elle définira l'orientation de vos moteurs. Guide pas à pas Configuration des moteurs Les moteurs doivent être individuellement configurés. Vous pouvez faire cela avant ou après la construction de votre robot mais dans la mesure ou cela nécessite d'avoir un seul moteur branché à la carte Pixl à la fois, il est généralement plus pratique de configurer les moteurs un-par-un, se souvenir du nom qu'il leur a été attribué, et assembler ce moteur au bon endroit dans le robot ensuite. Attention Pour configurer les moteurs, vous devez les connecter séparément un par un à la Raspberry Pi. Si vous essayez de configurer un nouveau moteur alors qu'il est connecté avec le moteur précédent, cela ne fonctionnera pas. Pour plus d’informations, consultez la section configuration de moteur. Etape 1 - motor 1 Tout d’abord, démarrez votre robot et configurez un moteur XL-320 sous le nom « m1 ». Montez ensuite le moteur sur la base imprimée en 3D. Pour cela, préparez 8 petits rivets. Placez la première partie dans la seconde sans les mettre à l'intérieur du moteur. Ensuite, placez le moteur sur la base avec le palonnier (= la roue du moteur) faisant face au côté le plus ouvert. Utilisez l'outil Ollo pour attraper le rivet entre la première et la seconde partie du rivet puis insérez le rivet dans un des trous d'assemblage. Une fois le rivet en place, verrouillez-le en poussant la première partie du rivet vers la seconde. Étape 2 - moteur 2 Configurez le second moteur, son nom est « m2 », avec la commande suivante dans un terminal du robot : poppy-configure ergo-jr m2 Monter la partie long_U. Soyez prudent avec l’orientation de la la pièce, le palonnier doit être orienté vers la gauche. Monter le moteur « m2 » sur le dessus de la construction. Étape 3 - moteur 3 Configurer un troisième moteur nommé « m3 ». Monter les pièces horn2horn et horn2side sur moteur « m2 » et monter « m3 » sur le dessus de la construction. Étape 4 - moteur 4 Configurer le quatrième moteur nommé « m4 ». Monter la pièce short_U sur le moteur 4. Monter le moteur « m4 » et la pièce short_U préalablement assemblée au sommet de la construction. Le nez du moteur doit être orienté vers l'arrière de la base. Étape 5 - moteur 5 Configurer le cinquième moteur nommé « m5 ». Monter les pièces horn2horn et horn2side sur moteur « m4 » et monter « m5 » sur le dessus de la construction. Étape 6 - l’outil de votre choix Configurer le sixième moteur nommé « m6 ». Pour terminer votre Ergo Jr, vous devez ajouter un outil à son extrémité. Choisissez un outil en fonction de ce que vous souhaitez faire. Note Les outils peuvent être facilement et rapidement changés, ce qui vous permet d'adapter votre robot aux différentes activités. L'abat-jour ou le stylo Monter les pièces horn2horn et horn2side sur moteur « m5 » et monter « m6 » sur le sommet de la construction. Vous pouvez monter le support de stylo ou de l’abat jour sur le moteur « m6 ». In the same way you mount the lampshade, you can also mount the pen holder. La pince Mount the gripper-fixation between motors \"m5\" and \"m6\". Mount gripper-fixed_part and gripper-rotative_part on motor \"m6\". There is two way to mount the gripper, vertically Or Horizontally Étape 7 - électronique Mount the support_camera part on the base. Fix the Raspberry Pi camera on it and move the camera flex cable between motor \"m1\" and the base. Camera flex wire To fix the flex cable of the camera on the Raspberry Pi: open the camera connector by pulling on the tab to the top make sure that connectors on the flex cable are facing away of the Ethernet port * push the flex on the port, and push the plastic tab down to close it Motors wires: If it is not already done, you can plug every motors wires. Every motor has two connectors but there is no input or output: you just have to create a chain of motors. The first motor is linked to the pixl and the second motor; the last motor is linked only to the previous one, and every other motors are linked to the one above and ahead. Info Les connecteurs du moteur « m1 » (à la base) sont un peu difficiles à brancher, vous pouvez utiliser l’outil OLLO pour vous aider. Étape 8 - fixer votre Ergo Jr sur le disque de support en bois Mount your Ergo Jr to the wood disk-support. Mount the Raspberry Pi to the disk support, and use 4 x M2.5x6mm screw to fix it. Step 9 - test your Robot ! Congratulation, you achieve the robot assembly! Now, it is almost done, it is time to test it! Go to your robot home page http://poppy.local. Click on Reboot the robot button to be sure that the robot software was started with all motors wired in. You can go to the monitor, click on Monitor and Control button. If the robot software is correctly started, you should see the green connection logo, otherwise it will be red. You can start a pre-defined behavior by clicking on the play logo. If the connection logo is red, you can see what is wrong by looking on messages in What append? page. Most of the time, it's because a wire is unplugged or because you forgot to configure a motor. Done Grab your favorite drink and relax. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"assembly-guides/poppycustom/":{"url":"assembly-guides/poppycustom/","title":"Custom your Ergo Jr","keywords":"","body":"This section will provide the documentation for modify your Ergo Jr Dragster Mini Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"assembly-guides/poppycustom/dragster-mini/":{"url":"assembly-guides/poppycustom/dragster-mini/","title":"Assemble the Dragster Mini","keywords":"","body":"Assembly guide for the Dragster mini Poppy Dragster mini is a small inexpensive educational robot based on the Ergo Jr that is a combination of a small robotic arm with 3 degrees of freedom mounted on a platform with two wheels. It is made of simple shapes that can be printed in 3D. They are assembled by small plastic screws which can be put or removed very quickly with the OLLO tool. Its tip can be easily changed. You can choose from several tools: a lamp shade, a clip, * or a pen holder. Thanks to the screws the tools can be quickly and easily exchanged. This makes it possible to adapt the tool according to your use of the robot and to assemble / disassemble your robot easily. The XL-320 motors have the same features as those used on other Poppy robots, but are slightly less powerful and less accurate. The advantage is that they are also much cheaper. The electronic board is visible next to the robot, which is interesting for understanding, manipulating and connecting additional sensors. No soldering is necessary, just add the pixl expansion board to the pins of the Raspberry Pi to connect the XL-320 motors. Instructions This chapter will guide you through all the steps necessary to fully assemble a mini Poppy Dragster. It will cover: the configuration of the motors l'assemblage électronique assembly of mechanical parts Complete assembly should take an hour or two the first time you build one. With more practice, half an hour is enough. At the end of the tutorial, you should have a functional Poppy Dragster Mini, ready to be runned ! We recommend that you follow the instructions carefully. Even if the Dragster is easily removable, it is always disappointing to have to restart a part of the assembly because we forgot to configure the engines, or a motor is reversed. Dragster mini material list 1 x Pixl expansion board (XL320 engine control board from a Raspberry Pi) les pièces imprimées en 3D au format STL ici 1 x dragster-base.stl 1 x dragster-basefront.stl 2 x dragster-wheel.stl 1 x base.stl 2 x 4dofs-horn2horn-5holes.stl 2 x 4dofs-side2side.stl 1 x long_U.stl the tools (optional) 1 x lamp.stl 1 x gripper-fixation.stl 1 x gripper-fixed_part.stl 1 x gripper-rotative_part.stl 1 x pen-holder.stl 1 x pen-screw.stl Parts made by Robotis 6 x dynamixel XL-320 servomotors 1 x set of OLLO rivets (you will need about 70 colored rivets screws and 1 gray rivet screw) 1 x OLLO tool Miscellaneous Electronics 1x Raspberry Pi 2 ou 3 1x micro SD 8GB (or more) 1x caméra Raspberry Pi 1 x 7.5V 2A power supply with a 2.1 x 5.5 x 9.5 connector (this one for instance). Ethernet cable Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"assembly-guides/poppy-humanoid/":{"url":"assembly-guides/poppy-humanoid/","title":"Assembler Poppy Humanoid","keywords":"","body":"Guide d’assemblage pour Poppy Humanoid Mise en garde Le guide d’assemblage pour le robot Humanoid n’a toujours pas été fusionné avec nouvelle documentation. Vous le retrouverez sur le répertoire github poppy-humaoid. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"assembly-guides/poppy-torso/":{"url":"assembly-guides/poppy-torso/","title":"Assembler Poppy Torso","keywords":"","body":"Guide d’assemblage pour Poppy Torso Mise en garde Le guide d’assemblage pour le robot Torso n’a toujours pas été fusionné avec nouvelle doc. Vous le retrouverez sur le répertoire github poppy-torso. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"programming/":{"url":"programming/","title":"Programmation","keywords":"","body":"Programmation Il y a différentes façons de programmer votre robot Poppy. Ce choix dépend de vos compétences et de vos préférences ! Si c'est votre première expérience dans la programmation, vous devriez probablement commencer par programmer avec Snap!. Si vous voulez utiliser Python sans aucune ligne de commande ni d'éditeur, vous devriez regarder la section utiliser Jupyther. Si vous voulez apprendre comment utiliser votre robot à travers Python, regarder la section programmer en Python. Si vous voulez contrôler à distance votre robot, regardez la section API des robots. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"programming/snap.html":{"url":"programming/snap.html","title":"Programmation avec Snap!","keywords":"","body":"Programming Poppy robots using Snap! Snap! is a blocks-based graphical programming language that allows users to create interactive animations, games, and more, while learning about mathematical and computational ideas. Snap! was inspired by Scratch (a project of the Lifelong Kindergarten Group at the MIT Media Lab), but also targets both novice and more advanced users by including and expanding Scratch's features. Snap! is open-source and it is entirely written in javascript, you can use it from the official website but you can also use a copy of the website in your personal computer and open the snap.html file in your browser. Warning Even if Snap! use JavaScript and HTML5 which are browser independent technologies, opening blocks for Poppy robots in Snap! is far faster in a web browser based on Webkit engine. We strongly recommend you to use Chromium Browser (which is very similar to Chrome without tracking tools), or Google Chrome. Introduction to Snap! programming This chapter will focus on things necessary to understand in Snap! for using Poppy creatures. If you want a well designed online lesson on Snap! we strongly encourage you to look at the \"Beauty and Joy of Computing\" (BJC) course made by the University of Berkeley for New York high school students. Some of the snapshots and concepts of BJC have been used for writing this chapter. Connect your robot to Snap! If you use a simulated robot on V-REP Info You need to have installed Poppy software libraries and V-REP simulator on your computer. If it is not done, go to the install poppy software section. First open V-REP. The quickest way is to use the command line utility poppy-service. Copy and press enter to execute the command below in your command prompt (windows) or terminal (OSX and Linux): poppy-services poppy-ergo-jr --snap --vrep Substitute 'poppy-ergo-jr' with 'poppy-humanoid' or 'poppy-torso' to launch respectively a Poppy Humanoid or a Poppy Torso. It will open a Snap! tab in your web browser for a simulated poppy-ergo-jr. If it is not automatically done, you can open Snap with preloaded blocks at simu.poppy-project.org/snap/ Warning Every popup in V-REP will block the communication to the robot interface. If a popup appear, close it and restart the command above. Alternative method: Instead of using poppy-service you can start it in full python: # use PoppyTorso PoppyHumanoid or PoppyEgoJr depending on what you want from pypot.creatures import PoppyErgoJr poppy = PoppyErgoJr(simulator='vrep', use_snap=True) If you use a simulated robot on poppy-simu (web viewer) Info You need to have installed Poppy software libraries on your computer. If it is not done, go to the install poppy software section. The quickest way is to use the command line utility poppy-service. Copy and press enter to execute the command below in your command prompt (windows) or terminal (OSX and Linux): poppy-services poppy-ergo-jr --snap --poppy-simu Warning poppy-simu is only available for poppy-ergo-jr. Other creatures are only supported in V-REP. It will open a Snap! tab in your web browser for a simulated poppy-ergo-jr. If it is not automatically done, you can open Snap with preloaded blocks at simu.poppy-project.org/snap/ and the robot viewer at simu.poppy-project.org/poppy-ergo-jr. Alternative method: Instead of using poppy-service you can start it in full python: from pypot.creatures import PoppyErgoJr poppy = PoppyErgoJr(simulator='poppy-simu', use_snap=True) If you have a tangible robot First, you must be connected to the same network LAN area than your robot (e.g. on the same router or Wifi). You have to go on the web homepage of your robot with its URL. You can use its IP address (for example http://192.168.1.42) if you have a way to know it or its hostname like http://poppy.local. To find its IP address look at the zeroconf chapter. To use directly its hostname http://poppy.local you must have a Zeroconf software installed on your computer (aka \"Bonjour print services for Windows\" if you are running Windows). The home page of your poppy creature should look like the snapshot below: Click on the \"Start Snap!\" link to open the Snap! interface at start the connection with the Poppy robot. Poppy special blocks are stored in the Examples. Go to \"file\" icon -> open -> Examples -> click on \"Poppy blocks\". It may take some time to load the blocks (~5-15 seconds), be patient. Interface and general ideas Saving in Snap! There are three ways of saving a project in Snap! Save the project in your web browser When you are not logged in Snap! Cloud, the default behaviour of Snap! is to save your project in your browser. Technically this uses the Local Storage which is a memory space in your web browser where websites can store offline data. This is very convenient because you have not to register or to see Snap! project files, but keep in mind that these projects are only visible in this specific web browser in this specific computer. Snap! Cloud « There is no Cloud, it's just someone else's computer ». Instead of saving your projects on your web browser, you can save them in Snap! servers in UC Berkeley, called \"cloud\". Moreover, this allows you to share your project with anyone, with a simple link. Create an account on Snap! cloud Click on the cloud button -> \"signup...\". Fill the required fields in the modal window for signing up. You will soon receive a validation email with a random password. You can now log in with your username and password. If you use your personal computer, remember to check the \"stay signed in on this computer [...]\" checkbox. After logging in account, you are free to change your password: click on the cloud button -> \"Change Password\". Share your Snap! project The big advantage of using Snap! Cloud is the ability to share a copy of your project with anyone. To share a Snap! project, you first need to be logged in Snap! Cloud and having your current project saved (\"save\" or \"save as\"). Go to the \"open\" menu: In the cloud section, select the project you want to share and click on \"Share\" button. Here is the trick step: to see the share link, you have to click on the \"Open\" button. And this will re-open your project with the public sharing URL. You can copy and paste the URL and share it by the way you want to your friends or to the Poppy community with the forum forum.poppy-project.org. When you open a share project, the project is automatically opened in full screen on the sprite zone. To quit the full screen you have to click on the double arrow at the top of the snapshot below. Export/Import your Snap! project If you have a limited access to internet and you want to share project with other people, the best way is to export it: A new tab in your web browser will be opened with an XML file like the picture below. This file describe all your Snap! project in a a simple file. It's not made to be human readable so don't be afraid, you just have to save it on your computer. For that, do a right click, chose \"save as\" and a proper name and location on you computer for this project. If you want to import a previously exported project, you simply have to click on the import section of the file icon. Search Poppy blocks Every Poppy block in Snap! begins by a robot icon. So you can search all of them by the robot keyword. To search a specific block, do a right click on the block area, or use the keyboard shortcut CTRL+F. Réseau First test your connection with the (tangible or simulated) robot with the \"test connection\" block. . if the block answer is \"You may have connection troubles\", your \"host\" variable inside the Snap! project is probably wrong. The host variable must be the IP or the hostname+\".local\" of your robot ; if you're using V-REP localhost is used to point to your own computer. . Build your own blocks! The functionality to build your own block was the first difference between Scratch and Snap! (now it's also possible to make custom blocks in Scratch)! Description of Poppy blocks Description This block allows you to connect Snap! to your robot. The host input can accept : - robot_name.local (e.g. : poppy.local if your robot’s name is poppy)- the IP address (e.g. 123.124.145.176) Click on this block to verify that you are connected to your robot. Put one or many motors in compliant or stiff mode. Motors are hand-drivable in compliant mode but must be in stiff mode to controlled with Snap!.The “motor(s)” input can accept:- string of a motor name (e.g. m1)- string of many motors separated with spaces (e.g. m1 m2 m4)- a Snap! list of motors like the reporter block \"$robot all motors\"\" or the block “list”\" Put one or many motors in a position (angle in degree) in a given time.The “motor(s)” input can accept: - string of a motor name (e.g. m1) - string of many motors separated with spaces (e.g. m1 m2 m4) - a Snap! list of motors like the reporter block \"$robot all motors\"\" or the block “list”. “Wait” can be true or false. If it’s on True, the action will wait the end of the previous action. If it’s on False, then the action will proceed during the previous one.\" Restart the software inside the robot. Put the value to one register (position, speed, max torque, …) of one or many motors. Activate/deactivate color leds of motors and choose the color of your choice.The “motor(s)” input can accept: - string of a motor name (e.g. m1) - string of many motors separated with spaces (e.g. m1 m2 m4) - a Snap! list of motors like the reporter block \"$robot all motors\"\" or the block “list” Play a movement at a given speed. It is necessary to indicate the exact name of the movement previously recorded. This block can be nested in the “concurrent/sequential” block.\" All blocks in input are run one after each other.You can use this block to play concurrently many sequently move. All reports input are run simultaneously.You can use this block to play concurrently many recorded move. Create and start a movement recorded by demonstration to the given motors. Stop a record and save the recorded move in the robot.Be careful, you must have previously defined a move record with the \"create & start record move ...\"\" block. Stop a movement that is being played. Play movements at the same time (can be nested to concurrent block). Inputs can be : - move name (string) - any reporter block, like sequential or play sequentially\" Play movements following in order (can be nested to sequential block). Inputs can be : - move name (string) - any reporter block, like sequential or play sequentially Start/Stop/Pause/Resume an integrated behaviour of the robot. It can be a position, a movement, a sensorimotor loop, high level camera feature.. Play a move in reverse at a given speed (reporter block) Play a move at a given speed (command block) Give motors which are in a given group. You can know groups name with the block “all motors groups”. Return a list with the name of every motors in the robot. Give the value of a register (position, speed, load, ... ) of one or many motors. Give the position of every motors. It is a shortcut to the block above. It is useful to make a snapshot of pose of the robot. Return the index of a motor name in the \"all motors\" block list. Give the URL of the robot. For internal use only. Give all records stored in this robot. Give the list of all attached/running behaviours . Give all existing motors groups. Get all methods or functions which are runnable in a behavior.It is an advanced block. Return a boolean (true/false) depending if the selected card is detected by the camera of the robot. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"programming/notebooks.html":{"url":"programming/notebooks.html","title":"Utilisation des notebooks Jupyter","keywords":"","body":"Gallerie de notebooks Jupyter : programmer en Python La plupart des exemples d'utilisation de Python avec les robots Poppy sont donnés avec les notebooks Jupyter. Nous encourageons fortement l’utilisation de cette application web, car elle permet la création et le partage de documents mélangeant du code, des éléments visuels et du texte explicatif. Par ailleurs, les notebooks permettent également la conception d'interface pour contrôler le robot en direct grâce à des widgets. Pour chaque notebook, nous fournissons une courte description de qu'il fait, avec quel robot / simulateur il peut être utilisé et bien sûr un lien. Most of the notebooks are written in english but you will also find some in french (and hopefully soon in other languages). Ce chapitre présente une série de notebooks et tente de les organiser en différentes catégories. Premiers pas Découvrez votre Poppy Ergo Jr : Notebook - Comment contrôler le robot, démarrer un comportement préprogrammé, envoyer des commandes moteur, obtenir les valeurs de capteurs ... Controlling a Poppy Humanoid in V-REP: Notebook - Describe how to setup a Poppy Humanoid in V-REP and how to control it (motor control and sensor reading) from pypot in Python. Record, Save, and Play Moves: Notebook - Simple introduction on how to record by demonstration moves on any Poppy Creature. It also shows how they can be re-played and saved/load to/from the disk. Notebooks en français 10 choses à savoir avec Poppy Humanoid/ErgoJr et V-REP: pour l'ErgoJr, pour l'Humanoid - 10 informations de base pour bien commencer avec Poppy Humanoid ou Poppy ErgoJr simulés dans V-REP et comment les contrôler en Python. Simulator V-REP Controlling a Poppy Humanoid in V-REP: Notebook - Describe how to setup a Poppy Humanoid in V-REP and how to control it (motor control and sensor reading) from pypot in Python. Interacting with objects in V-REP: Notebook - Show how you can programtically add objects to the V-REP simulation and interact with them. This example uses a Poppy Torso but can be easily adapted to other creatures. Learning the robot IK: Notebook - Demonstrate how explauto can be used to learn the inverse kinematics of a Poppy Humanoid. The experiments are run in V-REP simulation but it also gives hints on how it can be transposed in the real world. Notebooks en français 10 choses à savoir avec Poppy Humanoid/ErgoJr et V-REP pour l'ErgoJr, pour l'Humanoid - 10 informations de base pour bien commencer avec Poppy Humanoid ou Poppy Ergo Jr simulés dans V-REP et comment les contrôler en Python. HTTP REST API and remote connection Controlling a robot using HTTP requests: Notebook - Show how you can send HTTP requests to a robot, using the REST API, to control it. The notebook is based on a V-REP simulated Poppy Humanoid but can be adapted to other creatures. Scientific experiments Discover Explauto Learning the robot IK: Notebook - Demonstrate how explauto can be used to learn the inverse kinematics of a Poppy Humanoid. The experiments are run in V-REP simulation but it also gives hints on how it can be transposed in the real world. Demo interface Primitives launcher for Poppy Humanoid: Notebook - Provides all codes needed to directly launched primitives (stand, sit, idle motions, limit torque...) Education Notebooks en français Initiation à l'informatique en Lycée Découverte: TP1, TP2, TP3 - Comprendre comment faire bouger simplement le robot. Utilisation des boucles. Ces TPs utilisent un Poppy Torso simulé dans V-REP. Dialogue: TP1, TP2 - Établir un dialogue entre Python et le robot. Ces TPs utilisent un Poppy Torso simulé dans V-REP. N'hésitez pas à nous faire savoir s'il manque certaines références d'ordinateurs portables! Vous pouvez directement envoyer une pull-request sur GitHub ou utiliser le gestionnaire de bug. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"programming/python.html":{"url":"programming/python.html","title":"Programmation en Python","keywords":"","body":"Programmation des robots Poppy en Python Ce chapitre vous guidera de manière à pouvoir contrôler les robots Poppy en Python. Comme c'est le langage actuel pour écrire des librairies Poppy, vous verrez comment accéder tous les différents niveaux de contrôle, du plus haut vers le plus bas. Nous allons détailler tout ce que vous devez savoir pour pouvoir programmer directement le robot en utilisant le Python embarqué dans le robot Poppy ou pour l'installer localement. Remarquez que ce chapitre ne prétend pas vous apprendre le langage Python ou la programmation à partir de zéro et donc si vous êtes totalement nouveau sur le langage Python, il peut être bon de commencer avec un tutoriel de Python. Pourtant, nous essayons de garder les tutoriels aussi simples que possible et nous vous avertirons toujours lorsque certaines parties ciblent les utilisateurs les plus avancés. Nous allons essayer de fournir autant d'exemples que possible et de l'axer sur l’API complète ainsi vous pouvez trouver et utiliser les fonctionnalités moins courantes. La plupart des exemples et didacticiels sont disponibles comme une liste de notebooks Jupyter. Le prochain chapitre, Galerie de notebooks Jupyter, présente une liste descriptive de chaque notebook, de ce qu'ils contiennent, comment ils peuvent être utilisés, pour quel robot, etc. Toutes les bibliothèques Poppy sont open source et sont distribués sous la licence GPL v3. Ainsi, vous pouvez accéder librement le code source sur GitHub. N’hésitez pas à créer un fork, envoyer un pull/request et à contribuer ! Pourquoi Python? Les bibliothèques développées pour le projet Poppy ont été conçus dans le but de rendre facile et rapide l’écriture du code de contrôle des différents robots basés sur - à l'origine - les servomoteurs dynamixel robotis. L’idée était de fournir un accès depuis le bas niveau -communication série brute avec un moteur spécifique par exemple- à des niveaux plus élevés tels que le démarrage et l’arrêt de primitives/comportements (p. ex. suivi de visage, postures,...) ou l'enregistrement directement des mouvements grâce à de l’apprentissage par démonstration. Nous avons décidé d’écrire la plupart d'entre eux en Python, car sa souplesse permet un développement rapide et modulaire. Elles étaient également destiné à être accessible par un large public, de développeurs, de roboticiens en général, pour des amateurs, des chercheurs, des artistes... Python a également été choisi pour l'énorme choix de bibliothèques existantes (scientifique, vision par ordinateur, web...), donc si quelqu'un souhaite ajouter un nouvel élément, comme le support à un nouveau moteur/capteur, cela devrait être réalisable le plus facilement et rapidement possible. Enfin, le support multiplateforme et la facilité d’installation étaient également des aspects essentiels. Vue d’ensemble des différentes bibliothèques Info Une documentation plus détaillée de ces bibliothèques logicielles est disponible dans la section bibliothèques logicielles Avant de se lancer dans la programmation, nous allons présenter brièvement les différentes bibliothèques Poppy existantes et comment elles interagissent entre elles. Il y a trois principales bibliothèques logicielles : pypot : C’est le cœur de l’architecture logicielle Poppy. Pypot gère toutes les communications de bas niveau avec le matériel (capteurs et moteurs), définit les boucles de synchronisation afin que votre commande soient toujours à jour. Il fournit également les primitives du mécanisme qui permet la définition d’un comportement simple qui peut être -plus ou moins- automatiquement combinés. poppy-ergo-jr, poppy-torso, and poppy-humanoid: ces bibliothèques sont spécifiques à chaque robot Poppy. Elles définissent la configuration particulière du robot, les capteurs utilisés, quels moteurs sont connectés à quel bus... C’est aussi ici que des comportements spécifiques à une créature sont définis (la primitive qui fait Poppy Humanoid se tenir debout par exemple). Cela est résumé dans le schéma ci-dessous : Installation Tout d’abord, notez que si vous n’envisagez d’utiliser que des robots réels, ils viennent avec Python et toutes les bibliothèques Poppy déjà installées. Vous pouvez vous connecter directement au serveur Jupyter Notebook via l'interface web et n’avez rien à installer sur votre machine ! Ce que vous devez installer est résumé dans le schéma ci-dessous : Ainsi, si vous prévoyez de soit Utiliser un simulateur (p. ex. V-REP ou simulateur web), ou de brancher le robot à votre ordinateur Vous devrez installer les bibliothèques Poppy localement. Elles fonctionnent sur Windows, Mac OSX, Linux et ont été testées sur Python >= 3.5 Si vous planifiez de brancher votre robot directement suir votre port USB, des pilotes additionnelles devront être installés. Les étapes sont détaillées dans ce chapitre. Pour démarrer : Bonjour Poppy ! Afin de vous donner une vue d'ensemble de ce que vous pouvez faire avec Poppy et Python, cette section va vous montrer comment : Crer et connecter votre robot Consulter les valeurs renvoyées par les capteurs et les moteurs Utiliser les primitives en enregistrant des mouvements Cette section ne prétend pas tout couvrir ce qui est possible mais vous donne un bon bagage de départ. Pour un usage avancé, la section suivante vous présente des cahiers Jupyter Notebook à suivre. Dans ces exemples, nous supposons que vous disposez d'un environnement fonctionnel, càd que vous avez soit : un robot branché avec sa Raspberry Pi : vous utiliser sont interpréteur Python préinstallé via le Jupyter Notebook installé les bibliothèques logicielles de votre créature sur votre ordinateur pour utiliser le simulateur installé les bibliothèques logicielles de votre créature sur votre ordinateur pour utiliser le robot branché en USB Créer et se connecter au robot Importer la bilbiothèque La toute première étape est d'importer la bilbiothèque. Dans Python elles s'appellent des modules ou packages. Pour ce faire, la syntaxe est la suivante: from pypot.creatures import * L'étoile signifie \"tout\", ce qui veut dire que nous allons importer toutes les créatures Poppy installées sur votre ordinateur. Mais il est possible d'en improter qu'une seule ... ... par exemple celle de l'Ergo Jr : from pypot.creatures import PoppyErgoJr ... par exemple celle de Torso : from pypot.creatures import PoppyTorso ... par exemple celle d'Humanoid : from pypot.creatures import PoppyHumanoid Note Si une erreur similaire à cette capture d'écran apparaît (erreur nommée Import Error), alors votre installation des bibliothèque Python a probablement échoué. Reportez-vous à la section d'installation pour recommencer. In [1]: from pypot.creatures import PoppyHumanoid ImportError Traceback (most recent call last) in () ----> 1 from pypot.creatures import PoppyHumanoid ImportError: cannot import name PoppyHumanoid Créer l'objet \"Robot\" (avec un robot réel) L'objet Robot est celui qui représente votre robot en Pyton. Selon votre créature, vous devez créer un objet différent ... ... pour importer l'objet de l'Ergo Jr : poppy = PoppyErgoJr() ... pour importer l'objet de Torso : poppy = PoppyTorso() ... pour importer l'objet de l'Humanoid : # if you are using a Humanoid poppy = PoppyHumanoid() Si aucune erreur n'apparaît, alors votre interpréteur Python est correctement connecté. En revanche si une erreur similaire à ceci apparait, alors certains de vos moteurs (voire tous) sont peut-être mal connectés ou défecteueux. Vérifiez leur connectique et le schéma de montage. Note Lorsqu'elle survient, cette erreur vous indiquer le numéro du ou des moteur(s) posant problème entre les crochets, cela peut vous aider à situer la source du problème. IOError: Connection to the robot failed! No suitable port found for ids [3, 5, 7, 11, 13, 17]. These ids are missing [3, 5, 7, 11, 13, 17] ! Créer l'objet Robot - avec CoppeliaSim (V-REP) To use a simulated robot instead of a real one, you only have to specify it when creating the Robot object. For instance, if you want to create a simulated Poppy Torso, you simply have to execute the following line: poppy = PoppyTorso(simulator='vrep') All three Poppy robots - Humanoid, Torso, and Ergo Jr - can be used with V-REP. If you see an error message like this, check that you have launched V-REP and that you have close the popup in V-REP (see this chapter for details). IOError: Connection to V-REP failed! Create the Robot object - with web simulator Currently only the Ergo Jr is usable within the web simulator. It also requires specific versions of libraries to be used properly. To make sure you meet these requirements, you can type this command from your shell: pip install pypot>=2.12 poppy-creature>=1.8 poppy-ergo-jr>=1.6 --upgrade Vous pouvez ensuite instancier la créature poppy-ergo-jr : poppy-services --poppy-simu --snap --no-browser poppy-ergo-jr Cela va créer un serveur pour Snap ! sur port 6969 et un serveur pour le visualiseur sur le port 8080. Vous pouvez ensuite vous diriger vers la page du visualiseur. Accéder aux capteurs et aux moteurs L’objet robot que vous venez de créer contient deux groupes principaux d’objets : moteurs sensors auxquelles on peut facilement accéder à l’aide de poppy.motors et poppy.sensors. Dès que l’objet robot est créé, il débute automatiquement des boucles de synchronisation qui assurerons que les dernières valeurs disponibles sont reçus/envoyés au robot. Note Les servomoteurs qui sont utilisés dans des robots Poppy peuvent être considérés à la fois comme des moteurs ou des capteurs. Indeed, on top of being \"simple\" motors, they also provide multiple sensing information: their current position, speed and load but also their temperature, the current used... Yet, for simplification they are only available under the motor category. Get data from your robot Now that you have created your robot object, you can directly use Python to discover which motors are attached. Note In all examples below the results are shown for an ErgoJr. If you are using a Torso or a Humanoid you will see more motors with different names. For instance, to know how many motors your robot have you can execute: print(len(poppy.motors)) poppy.motors is actually a list of all motors connected to your robot. Thus, if you want to get the present position of all motors, you can do: for m in poppy.motors: print(m.present_position) Of course, you can also access a specific motor. To do that, you need to know the name for the motor you want to access. You can find this list in the assembly documentation of your robot. You can also get a list of all motors name directly from python: for m in poppy.motors: print(m.name) or using a motor pythonic expression: print([m.name for m in poppy.motors]) Then you can directly access the desired motor by its name: m = poppy.m3 or get its position: print(poppy.m3.present_position) The most common values for motors are: present_position present_speed * present_load Similarly, you can get data from your sensors. Depending on the Poppy robot you have different sensors available. You can get the list of all sensors in the exact same way you did for motors: print([s.name for s in poppy.sensors]) And then access a specific sensors by its name. For instance, to get an image from the camera of the Ergo Jr: img = poppy.camera.frame Note This section just presented some of the available values that you can get from your motors/sensors. They are many other - some are specific to a particular robot - we will present them through the different notebooks. Send motor commands Now that we have shown you how to read values from your robot, it is time to learn how to make it move! This is actually really similar to what you have just seen. Instead of getting the present_position of a motor you simply have to set its goal_position. But first, you have to make sure your motor is stiff, meaning that you cannot move it by hand. To do that we will turn off its compliancy. Assuming you have an Ergo Jr and want to make the motor m3 moves - feel free to use any other motor but make sure the motor can freely move without hurting any of your finger: poppy.m3.compliant = False The motor should now be stiff. And then, to make it move to its zero position: poppy.m3.goal_position = 0 Note: present_position and goal_position are actually two different registers. The first refers to the current position of the motor (read only) while the second corresponds to the target position you want your robot to reach. Thus, they can have different values while the motor is still moving to reach its goal_position. As a slightly more complex example we will make it go to 30 degrees then -30° three times: import time for _ in range(3): poppy.m3.goal_position = 30 time.sleep(0.5) poppy.m3.goal_position = -30 time.sleep(0.5) Note that after each new value set to goal_position we wait so the motor has enough time to actually reach this new position. Another way to do the same thing is to use the goto_position method: import time for _ in range(3): poppy.m3.goto_position(30, 0.5, wait=True) poppy.m3.goto_position(-30, 0.5, wait=True) As you can see, this method takes three arguments, the target position, the duration of the move and whether to wait or not the end of the motion. If you want to move multiple motors at the same time, you can simply do something like: for _ in range(3): poppy.m1.goal_position = -20 poppy.m3.goal_position = 30 time.sleep(0.5) poppy.m1.goal_position = 20 poppy.m3.goal_position = -30 time.sleep(0.5) or use a python dictionary storing the target position per motor you want to move, that can be given to the goto_position method: pos_1 = {'m1': -20, 'm3': 30} pos_2 = {'m1': 20, 'm3': -30} for _ in range(3): poppy.goto_position(pos_1, 0.5, wait=True) poppy.goto_position(pos_2, 0.5, wait=True) Note You can turn a motor back to its compliant mode (where you can freely move it) by setting its compliant register to True: poppy.m3.compliant = True Record and play motion by demonstration using primitives Pypot provides you with the primitive mechanism, which are simply pre-defined behaviors that can be attached to your robot. In this section, we will show you how to use some primitives already existing for recording and playing motions. You can also define your own primitive but this is out of the scope of this section, you will find details on how to do this in dedicated notebooks. Record a motion by demonstration Designing choreographies for your robot using goal_position or goto_position can be long and kind of troublesome. Fortunately, there is a much more efficient way of doing this: recording motions by directly demonstrating the move on the robot. This can be summarized into few steps: make the robot compliant so you can move it by hand start the recording actually moves the robot so it follows whatever move/choreography you can think of stop the recording And now to do that in Python: So, first we turn all motors of the robot compliants: for m in poppy.motors: m.compliant = True Info You can also record a movement with motors stiff (compliant = False), and moving them with goal_position or goto_position commands. Then, we have to include the primitive used for recording motion: from pypot.primitive.move import MoveRecorder To create this primitive, you have to give the following arguments: on which robot you want to use this primitive (this can be useful if you are working with multiple robot at a time - for instance you can record a move on a robot and at the same time make it reproduce by another one. the record frequency of the move you want to register: how many position per second will be recorded - the higher the more accurate the record will be but also more data will have to be processed - good values are usually between 10Hz and 50Hz. the motors that you want to record. you can record a move on a subpart of you robot, for instance only on the left arm. Here, we will record a move on the whole robot at 50Hz: record = MoveRecorder(poppy, 50, poppy.motors) Note We used poppy.motors to specify that we want all motors if you only want let's say the two first motors of an Ergo Jr you could have used [poppy.m1, poppy.m2] instead. Now it is time to record. As it can be hard to both move the robot and type Python command at the same time, we will make a small script, that: wait 5s so you can get ready to record start the record record for 10 seconds stop the records import time # Give you time to get ready print('Get ready to record a move...') time.sleep(5) # Start the record record.start() print('Now recording !') # Wait for 10s so you can record what you want time.sleep(10) # Stop the record print('The record is over!') record.stop() Now, you should have a move recorded. You can retrieve it from the recorder primitive: my_recorded_move = record.move and check how many positions where recorded: print(len(my_recorded_move.positions())) Replay recorded moves Now to play back recorded motions you have to use another primitive: MovePlayer from pypot.primitive.move import MovePlayer player = MovePlayer(poppy, my_recorded_move) As you can see, to create it you have to specify the robot (as for the MoveRecorder) and the move you want to play. Note Automatically all recorded motors become stiff to be able to play the move. Then, you can simply start the replay: player.start() And if you want to play it three times in a row: for _ in range(3): player.start() player.wait_to_stop() We use the wait_to_stop method to make sure we wait for the first move to finish before we start another. By default, playing a move we will not block to allow you to play multiple move in parallel. Write a simple sensori-motor loop Robotic is all about sensori-motor loops, meaning that motor commands will be more or less directly related to the sensor readings. In other terms the robot actions will be determined by what it perceives from its environment. Poppy libraries and more particularly pypot provides you with tools to easily write sensori-motor loops. We will show here a very simple example where some motor of an Ergo Jr will be controlled by the position of other motors in order to keep the head of the Ergo Jr straight. To do that, we will free the two first motors, so they can be moved by hand. Two other motors will try to lively compensate the motion applied on the free motors. We need few simple steps: read values from sensors (here the two free motors) compute command from those readings set new motor command go back to step 1. Note This example is designed for the Ergo Jr. It could be adapted to other Poppy robots, by changing the motors used. Yet, it is not that obvious which one to use to have a \"cool\" result. Demo version Before writing the sensori-motor loop, we will first set the Ergo Jr in a base position. from pypot.creatures import PoppyErgoJr jr = PoppyErgoJr() jr.goto_position({'m1': 0., 'm2': -60., 'm3': 55., 'm4': 0., 'm5': -55., 'm6': 60.}, 2., wait=True) Then, we make sure the moving speed of the motors are not too high to prevent shaky motions: for m in jr.motors: m.moving_speed = 250 Finally, we free the two first motors: jr.m1.compliant = True jr.m2.compliant = True Now, that everything is setup we write our very simple sensori-motor loop like this: import time while True: # Step 1 p1 = jr.m1.present_position p2 = jr.m2.present_position # Step 2 g1 = -p1 g2 = -p2 # Step 3 jr.m4.goal_position = g1 jr.m6.goal_position = g2 time.sleep(.02) Step 1: As you can see, here our readings step is simply to retrieve the present_position of the motors m1 and m2. Step 2: Here, we defined the base position so the motors m1/m4 and m2/m6 are parallel. Thus, to compensate the head position, we simply have to define the new motor goal position as the opposite of the read present position. Step 3: We simply set the goal position as the just computed command Those steps are included inside an infinite loop - with a time.sleep to avoid CPU overhead. Note To stop this while True loop, you will have to use the classical Ctrl-c, or use the stop button if you are running it through Jupyter. Now with a primitive But what about if you want to make this behavior an independent \"brick\" that you can start/stop on demand combine with other behaviors. Well, primitives are meant to do just that. There is two main types of primitive: Primitive and LoopPrimitive. The first one basically gives you access to just a run method where you can do everything you want on a robot. The second one as the name indicates is an infinite loop which calls an update method at a pre-defined frequency. In our case it is the more suited one. Here is the entire definition of this primitive: class KeepYourHeadStraight(LoopPrimitive): def setup(self): for m in self.robot.motors: m.compliant = False self.robot.goto_position({'m1': 0., 'm2': -60., 'm3': 55., 'm4': 0., 'm5': -55., 'm6': 60.}, 2., wait=True) for m in self.robot.motors: m.moving_speed = 250 self.robot.m1.compliant = True self.robot.m2.compliant = True def update(self): self.robot.m4.goal_position = -self.robot.m1.present_position self.robot.m6.goal_position = -self.robot.m2.present_position As you can see, there is two main parts. The setup method which defines what needs to be done to prepare the robot before starting the behavior - here simply puts it in its base position and turn on the compliance for the two first motors. And the update method which will be regularly called: here is where we put the actual code for the sensori-motor loop: reading sensor - computing the new command - and sending the new command to the motors. Now that we have defined our primitive, we can instantiate it and start it: # we specify we want the primitive to apply on the jr robot instance # and that the update method should be called at 50Hz head_straight = KeepYourHeadStraight(jr, 50.0) head_straight.start() You can stop it whenever you want: head_straight.stop() And re-starting it again... head_straight.start() The huge advantage of using a primitive in this case is that after starting it, you can still easily run any other codes that you want. The primitive starts its own thread and thus runs in background without blocking the execution of the rest of the code. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"programming/rest.html":{"url":"programming/rest.html","title":"API des robots","keywords":"","body":"Use the REST API to control a Poppy Robot Attention Cette page est encore vierge. Votre aide est nécessaire pour la remplir ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"demo-activities/":{"url":"demo-activities/","title":"Activités","keywords":"","body":"Galerie d’activités Attention Cette page est encore vierge. Votre aide est nécessaire pour la remplir ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"demo-activities/snap4arduino.html":{"url":"demo-activities/snap4arduino.html","title":"Lien avec Snap4Arduino","keywords":"","body":"Contrôler Poppy avec un Arduino via Snap4Arduino Rédigé par Gilles Lassus. Objectif : contrôler un moteur de Poppy par un potentiomètre sur la platine Arduino. Préparation de Snap4Arduino Téléchargez et installez Snap4Arduino. Téléchargez les blocs pypot-snap-blocks.xml. Ils devront être importés dans Snap4Arduino à chaque démarrage. Préparation de l'Arduino Connectez votre platine, ouvrez Arduino et téléversez le firmware StandardFirmata. (disponible via Fichier - Exemples - Firmata). Branchez un potentiomètre sur la sortie analogique A0, comme illustré ci-dessous : Lancement de la simulation (dans le cas d'un Poppy simulé dans Vrep) Lancez V-REP. Exécutez les commandes python suivantes : from pypot.creatures import PoppyHumanoid poppy = PoppyHumanoid(simulator='vrep', use_snap=True) puis poppy.snap.run() Ouverture de Snap4Arduino Lancez Snap4Arduino et importez les blocs pypot-snap-blocks.xml. (une fenêtre avertissant que le projet importé a été créé par Snap! apparaît ; elle est sans conséquence.) Dans les blocs Arduino, cliquez sur Connect Arduino pour établir la connexion entre Snap4Arduino et votre platine. Un message de confirmation apparaît, signe que la connexion est effective. Commander un moteur via le potentiomètre La valeur analogique lue dans A0 est un entier entre 0 et 1024. Pour la \"mapper\" entre (environ) -40 et 40, on la divise par 12 avant de lui soustraire 40. On peut donc alors construire l'instruction suivante, qui fera bouger le moteur head_z de Poppy entre -40° et +40° : Remarques diverses Il peut être utile de créer un bloc map équivalent à la fonction éponyme d'Arduino, permettant de mettre à l'échelle automatiquement une valeur dans une plage donnée : Le script de commande du moteur head_z de Poppy entre -40° et 40° deviendrait alors : Cette méthode de contrôle a pour principal défaut de \"bloquer\" la carte Arduino avec le StandardFirmata : il serait plus agréable de pouvoir simplement lire les données du port série envoyées par l'Arduino, et ainsi pouvoir téléverser le programme de son choix dans l'Arduino. Ceci est discuté ici. Toutefois, la page du projet Snap4Arduino liste les composants annexes (LCD display, UltraSound Sensor) pouvant être directement contrôlés, et explique en détail comment modifier le StandardFirmata pour intégrer un nouveau composant. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"from-simulation-to-real-robot/":{"url":"from-simulation-to-real-robot/","title":"De la simulation au robot tangible","keywords":"","body":"Passer du robot Poppy simulé au robot physique Un élément-clé du projet Poppy est de vous donner la possibilité de facilement passer d'un robot simulé (en utilisant V-REP par exemple) à un vrai robot. C'est assez utile lorsque vous : Développez une expérimentation dans laquelle vous pouvez tout configurer à partir de la simulation, pour la lancer ensuite sur le robot physique. Faites travailler vos élèves dans un premier temps sur des ordinateurs grâce à une simulation pour ensuite les faire essayer leurs travaux sur un robot physique partagé Cependant, même si c'est fait de façon à ce que passage d'un plan à l'autre soit aisé, il y a quelques points à assimiler. Une des différence majeure est que lorsque vous travaillez via la simulation, tout se fait depuis votre ordinateur alors que quand vous utilisez une robot physique, le logiciel (par exemple les Python Notebooks) tout se fait depuis le robot. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"from-simulation-to-real-robot/using-jupyter.html":{"url":"from-simulation-to-real-robot/using-jupyter.html","title":"Programmer avec les notebooks Jupyter","keywords":"","body":"À l’aide des notebooks Jupyter en Python L'un des avantages de travailler avec les notebooks Jupyter est de pouvoir les utiliser dans une approche client/serveur.Chaque robot Poppy héberge un serveur Jupyter accessible via l'interface web (voir la section démarrage rapide pour plus de détails). Lorsque vous travaillez via une simulation, tout est géré et stocké sur votre ordinateur. Lorsque vous travaillez avec un robot physique vous pouvez le programmer depuis un navigateur web sur votre propre ordinateur, mais vos notebooks Jupyter sont en fait stockés et exécutés dans le robot. Donc pour passer de la simulation au robot physique, vous devez passer de votre instance locale Jupyter à l'instance hébergée par le robot. Les étapes sont décrites ci-dessous. Se connecter à Jupyter sur le robot Une fois connecté à l'interface web du robot http://poppy.local (nous supposerons ici que son nom d’hôte est poppy, remplacez-le par le nouveau nom d’hôte si vous l’avez changé), vous devriez voir un lien ouvrir notebook Ipython. Lorsque vous cliquez dessus, Jupyter démarre sur le robot et vous redirige vers le serveur Web Jupyter. Vous devriez alors voir la racine du dossier notebook hébergé sur le robot : C'est ici que vous pouvez mettre vos propre notebooks. Bien sûr vous pouvez créer des dossier, les organiser à souhait etc. Note : Si vous avez besoin d'un accès plus précis ou d'une configuration plus avancée (telle qu'une autorisation), vous devez vous connecter au robot directement en utilisant SSH. Télécharger un notebook Une fois connecté au serveur Jupyter hébergé par le robot, vous pouvez directement utiliser l’interface Jupyter pour le téléverser de nouveaux notebooks. Le bouton rond permet de télécharger votre notebook local, stocké sur votre propre ordinateur, au robot. Ils peuvent alors être directement exécuté sur le robot. Sachez que pour le moment, nous ne traitons pas avec des autorisations ou des sessions (comme JupyterHub par exemple), et donc toute personne ayant accès au robot peut utiliser ou supprimer tous notebooks stockés dans le robot. Adapter votre code Il y a peu d’endroits où vous devez réellement modifier votre code pour qu’il fonctionne avec un robot physique. Nous essayons de minimiser l’effort nécessaire dans la mesure du possible, cependant certaines étapes sont encore nécessaires. Instanciation Lorsque vous créez le robot, vous devez en fait préciser si vous êtes disposé à travailler avec un robot physique ou un robot simulé. Cela se fait simplement via un paramètre. Par exemple : En travaillant avec V-REP : from pypot.creatures import PoppyHumanoid poppy = PoppyHumanoid(simulator='vrep') En travaillant avec le robot physique : from pypot.creatures import PoppyHumanoid poppy = PoppyHumanoid() Bien évidemment, cela fonctionne pour tous les robots Poppy : Humanoid, Torso et Ergo Jr. Il s’agit de la plupart des modifications que vous aurez à faire. Les APIs spécifiques Une partie de l'API dépend des plateformes. Par exemple, en utilisant V-REP vous avez accès aux fonctionnalités de tracking qui vous permet de récupérer n'importe quelle position 3D de l'objet. Mais cette méthode n'a pas d'équivalent dans le monde réel et n'est donc pas réalisable avec un robot physique. Utiliser la propriété simulée est un bon entrainement si vous souhaitez écrire du code compatible pour les deux cas. Elle est automatiquement définie à la valeur correcte selon la façon dont vous instanciez votre robot. Par exemple, poppy = PoppyHumanoid(simulator='vrep') def reset_position(): if poppy.simulated: poppy.reset_simulation() else: print('Ask one internship student to put the robot back in its origin position.') time.sleep(10) Version et bibliothèques tierces Le principal inconvénient de travail avec le mode client/serveur est que les versions de vos logiciels installés localement peuvent différer de celui installé sur le robot. La version de Python installée sur le robot est Python 3 et dispose de la plupart des principales bibliothèques scientifiques (numpy, scipy, matplotlib, opencv). Une liste exhaustive des packages Python installés sera disponible bientôt . Pour le moment, le moyen le plus simple d'y parvenir est d’utilisé un terminal notebook qui peut être exécuté directement depuis l’interface de Jupyter. En utilisant la même technique, vous pouvez installer des bibliothèques tierces directement sur le robot. L' outils utilitaire pip est installé dans un environnement virtuel Python et devrait être utilisé lorsque cela est possible. Notez que la carte embarquée repose sur une architecture armv7 et donc certaines bibliothèques peuvent être difficiles à compiler. Nous maintenons une liste de recettes conda spécialement conçu pour cette plate-forme ici.Plus de contributions sont les bienvenues ! * Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"from-simulation-to-real-robot/using-snap.html":{"url":"from-simulation-to-real-robot/using-snap.html","title":"Snap! sur le robot tangible","keywords":"","body":"Avec Snap! Attention Cette page est encore vierge. Votre aide est nécessaire pour la remplir ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"software-libraries/":{"url":"software-libraries/","title":"Documentation des bibliothèques logicielles","keywords":"","body":"Software libraries This section will provide software documentation of various libraries used in Poppy robots. Pypot Poppy-creature Poppy Ergo Jr Poppy Humanoid Poppy Torso Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"software-libraries/pypot.html":{"url":"software-libraries/pypot.html","title":"Pypot","keywords":"","body":"Pypot library Caution Pypot documentation has still not been merged in the new documentation. You can find it at poppy-project.github.io/pypot/ Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"software-libraries/poppy-creature.html":{"url":"software-libraries/poppy-creature.html","title":"Poppy-creature","keywords":"","body":"Poppy-creature library Introduction Poppy-creature is a small library providing an abstract interface for robots (Poppy Humanoid, Poppy Torso, Poppy Ergo Jr...). It links high level controls and pypot, the generic low level library. It mainly contains the class definition of pypot.creatures.abstractcreature.AbstractPoppyCreature which takes a configuration and builds a pypot.robot.robot.Robot out of it, but also a bunch of parameters to launch Snap! or HTTP servers, or to replace the communication toward Dynamixel servos by a communication with a simulator. The arguments you can provide are: base_path default: None Path where the creature sources are. The librarie looks in the default PATH if not set. config default: None Path to the configuration file with respect to the base-path simulator default: None Possible values : 'vrep' or 'poppy-simu'. Defines if we are using a simulator (and which one) or a real robot. scene default: None Path to the scene to load in the simulator. Only if simulator is vrep. Defaults to the scene present in the creature library if any (e.g. poppy_humanoid.ttt). host default: 'localhost' Hostname of the machine where the simulator runs. Only if simulator is not None. port default: 19997 Port of the simulator. Only if simulator is not None. use_snap default: False Should we launch the Snap! server snap_host default: 0.0.0.0 Hostname of the Snap! server snap_port default: 6969 Port of the Snap! server snap_quiet default: True Should Snap! not output logs use_http default: False Should we launch the HTTP server (for http_host default: 0.0.0.0 Hostname of the HTTP server http_port default: 8080 Port of the HTTP server http_quiet default: True Should HTTP not output logs use_remote default: False Should we launch the Remote Robot server remote_host default: 0.0.0.0 Hostname of the Remote Robot server remote_port default: 4242 Port of the Remote Robot server sync default: True Should we launch the synchronization loop for motor communication The sources are available on GitHub. Poppy services Poppy-creature also provides a command line utility poppy-services. It provides shortcuts to start services like SnapRemoteServer and HTTPRemoteServer from your terminal. Example: poppy-services poppy-ergo-jr --snap --no-browser This will launch the SnapRemoteServer for a real Poppy Ergo Jr robot. Note The --no-browser option avoid the automatic redirection to the Snap! webpage. You can remove it if you use a computer with a GUI (e.g your laptop instead of the robot embedded board). Another example: poppy-services poppy-ergo-jr --snap --poppy-simu It will open a Snap! windows for a simulated poppy-ergo-jr. The way to use it is: poppy-services the available options are: --vrep: creates the specified creature for using with V-REP simulator --poppy-simu: creates the specified creature for using with web simulator and also launches the HTTP server needed by poppy-simu. Poppy-simu is only available for poppy-erg-jr for now. --snap: launches the Snap! server and directly imports the specific Poppy blocks. -nb or --no-browser: avoid automatic start of Snap! in web browser, use only with --snap --http: start a http robot server --remote: start a remote robot server -v or --verbose: start services in verbose mode (more logs) Create your own Poppy creature While developping a new Poppy creature, it is first easier to simply define it in a configuration file or dictionnary and instanciate a pypot.robot.robot.Robot from Pypot directly. But when you want to make it easily usable and available to non-geek public, the best is to create your own creature's library. It should contain a configuration file and a class that extends pypot.creatures.abstractcreature.AbstractPoppyCreature. You can then add your own properties and primitives. Example from Poppy Humanoid: class PoppyHumanoid(AbstractPoppyCreature): @classmethod def setup(cls, robot): robot._primitive_manager._filter = partial(numpy.sum, axis=0) for m in robot.motors: m.goto_behavior = 'minjerk' for m in robot.torso: m.compliant_behavior = 'safe' # Attach default primitives: # basic primitives: robot.attach_primitive(StandPosition(robot), 'stand_position') robot.attach_primitive(SitPosition(robot), 'sit_position') # Safe primitives: robot.attach_primitive(LimitTorque(robot), 'limit_torque') Package your code it properly using setuptools. For a better integration with the Poppy installer scripts, please have in the root of your repo a folder named software containing: the installation files (setup.py, MANIFEST, LICENCE) a folder named poppy_yourcreaturename containing your actual code At the end, don't forget to share it to the community! Most interesting creatures will be added to this documentation! Installing Info poppy-creature library is a dependancy of any Poppy robots libraries, so you don't have to install it by hand in a normal case. To install the poppy-creature library, you can use pip: pip install poppy-creature Then you can update it with: pip install --upgrade poppy-creature If you prefer to work from the sources (latest but possibly unstable releases), you can clone them from GitHub and install them with (in the software folder): python setup.py install Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"software-libraries/poppy-ergo-jr.html":{"url":"software-libraries/poppy-ergo-jr.html","title":"Poppy Ergo Jr","keywords":"","body":"Poppy-ergo-jr library Caution This section need to be completed, contribution are welcome ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"software-libraries/poppy-humanoid.html":{"url":"software-libraries/poppy-humanoid.html","title":"Poppy Humanoid","keywords":"","body":"Poppy-humanoid library Caution This section need to be completed, contribution are welcome ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"software-libraries/poppy-torso.html":{"url":"software-libraries/poppy-torso.html","title":"Poppy Torso","keywords":"","body":"Poppy-torso library Caution This section need to be completed, contribution are welcome ! Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"appendix/network.html":{"url":"appendix/network.html","title":"Réseau","keywords":"","body":"Réseau Cette section contient une série d'astuces pour éviter les problèmes réseau. Où est Poppy ? Si vous recherchez votre robot sur votre réseau, rendez-vous au chapitre zeroconf. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"appendix/contribute.html":{"url":"appendix/contribute.html","title":"Contribuez","keywords":"","body":"Contribuer au Projet Poppy Si vous voulez faire partie du projet, la première étape est de devenir membre de la communauté sur le forum Poppy. Le forum est l'espace consacré aux échanges entre les utilisateurs et les contributeurs. Vous êtes invités à partager votre projet et vos idées dans votre langue préférée. Le projet Poppy étant un projet pluridisciplinaire, il y a plusieurs façons d'apporter sa contribution : En sciences de l’ingénierie telles que l'IA, l'informatique, la mécanique, l'électronique, apprentissage automatique... En sciences humaines, telles que les sciences cognitives, la psychologie... En sciences de la vie telles que la biologie, la biomécanique... Dans le domaine de la gestion de communauté, de la médiation scientifique, de la communication... En design, tel qu'en web design, design interface ou amélioration de l'expérience utilisateur... Des profils artistiques pour la conception d'animations qui recréent des mouvements réalistes et des émotions. Si vous n'avez aucune idée de comment contribuer mais que vous en avez la volonté, nous vous invitons à jeter un coup d'oeil aux \"issues\" ouvertes sur notre GitHub et aux appels à contribution. Pour les ninjas du GitHub, vous pouvez bien sûr créer des tickets pour signaler un problème ou développer de nouvelles fonctionnalités époustouflantes et ouvrir des pull requests pour demander à intégrer votre idée. Des questions ? Nous sommes toujours heureux de vous aider sur un problème de programmation ou sur tout autre question que vous pourriez avoir ! N'hésitez pas à poser vos questions et partager des solutions sur notre forum communautaire. "},"appendix/faq.html":{"url":"appendix/faq.html","title":"FAQ","keywords":"","body":"FAQ Caution This Page is not currently written. Your help is welcome to fulfil it ! If you have any question please fill free to ask on the Poppy forum. General issues Quote Motors seems to be tired (low torque, jerky, ...), what can I do ? Change your wires ! Questions ? We're always happy to help with code or other questions you might have! You can ask questions and share solutions on our community Forum. "}}